import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as d,a as s,b as n,d as e,w as r,e as i}from"./app-Cg1ooxyK.js";const c={},u=i(`<h2 id="redis-事务" tabindex="-1"><a class="header-anchor" href="#redis-事务"><span>Redis 事务</span></a></h2><h3 id="什么是-redis-事务" tabindex="-1"><a class="header-anchor" href="#什么是-redis-事务"><span>什么是 Redis 事务？</span></a></h3><p>你可以将 Redis 中的事务理解为：<strong>Redis 事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。</strong></p><p>Redis 事务实际开发中使用的非常少，功能比较鸡肋，不要将其和我们平时理解的关系型数据库的事务混淆了。</p><p>除了不满足原子性和持久性之外，事务中的每条命令都会与 Redis 服务器进行网络交互，这是比较浪费资源的行为。明明一次批量执行多个命令就可以了，这种操作实在是看不懂。</p><p>因此，Redis 事务是不建议在日常开发中使用的。</p><h3 id="如何使用-redis-事务" tabindex="-1"><a class="header-anchor" href="#如何使用-redis-事务"><span>如何使用 Redis 事务？</span></a></h3><p>Redis 可以通过 <strong><code>MULTI</code>，<code>EXEC</code>，<code>DISCARD</code> 和 <code>WATCH</code></strong> 等命令来实现事务(Transaction)功能。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> MULTI
OK
<span class="token operator">&gt;</span> SET PROJECT <span class="token string">&quot;JavaGuide&quot;</span>
QUEUED
<span class="token operator">&gt;</span> GET PROJECT
QUEUED
<span class="token operator">&gt;</span> EXEC
<span class="token number">1</span><span class="token punctuation">)</span> OK
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;JavaGuide&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),h={href:"https://redis.io/commands/multi",target:"_blank",rel:"noopener noreferrer"},g=s("code",null,"MULTI",-1),m={href:"https://redis.io/commands/exec",target:"_blank",rel:"noopener noreferrer"},k=s("code",null,"EXEC",-1),b=s("p",null,"这个过程是这样的：",-1),v=s("ol",null,[s("li",null,[e("开始事务（"),s("code",null,"MULTI"),e("）；")]),s("li",null,"命令入队(批量操作 Redis 的命令，先进先出（FIFO）的顺序执行)；"),s("li",null,[e("执行事务("),s("code",null,"EXEC"),e(")。")])],-1),y={href:"https://redis.io/commands/discard",target:"_blank",rel:"noopener noreferrer"},R=s("code",null,"DISCARD",-1),f=i(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> MULTI
OK
<span class="token operator">&gt;</span> SET PROJECT <span class="token string">&quot;JavaGuide&quot;</span>
QUEUED
<span class="token operator">&gt;</span> GET PROJECT
QUEUED
<span class="token operator">&gt;</span> DISCARD
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_={href:"https://redis.io/commands/watch",target:"_blank",rel:"noopener noreferrer"},E=s("code",null,"WATCH",-1),x=s("code",null,"EXEC",-1),S=s("code",null,"WATCH",-1),T=s("strong",null,"其他客户端/Session",-1),O=i(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 客户端 1</span>
<span class="token operator">&gt;</span> SET PROJECT <span class="token string">&quot;RustGuide&quot;</span>
OK
<span class="token operator">&gt;</span> WATCH PROJECT
OK
<span class="token operator">&gt;</span> MULTI
OK
<span class="token operator">&gt;</span> SET PROJECT <span class="token string">&quot;JavaGuide&quot;</span>
QUEUED

<span class="token comment"># 客户端 2</span>
<span class="token comment"># 在客户端 1 执行 EXEC 命令提交事务之前修改 PROJECT 的值</span>
<span class="token operator">&gt;</span> SET PROJECT <span class="token string">&quot;GoGuide&quot;</span>

<span class="token comment"># 客户端 1</span>
<span class="token comment"># 修改失败，因为 PROJECT 的值被客户端2修改了</span>
<span class="token operator">&gt;</span> EXEC
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token operator">&gt;</span> GET PROJECT
<span class="token string">&quot;GoGuide&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),q=s("strong",null,"WATCH",-1),j=s("strong",null,"事务",-1),C=s("strong",null,"WATCH",-1),w={href:"https://github.com/Snailclimb/JavaGuide/issues/1714",target:"_blank",rel:"noopener noreferrer"},L=i(`<p>事务内部修改 WATCH 监视的 Key：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SET PROJECT <span class="token string">&quot;JavaGuide&quot;</span>
OK
<span class="token operator">&gt;</span> WATCH PROJECT
OK
<span class="token operator">&gt;</span> MULTI
OK
<span class="token operator">&gt;</span> SET PROJECT <span class="token string">&quot;JavaGuide1&quot;</span>
QUEUED
<span class="token operator">&gt;</span> SET PROJECT <span class="token string">&quot;JavaGuide2&quot;</span>
QUEUED
<span class="token operator">&gt;</span> SET PROJECT <span class="token string">&quot;JavaGuide3&quot;</span>
QUEUED
<span class="token operator">&gt;</span> EXEC
<span class="token number">1</span><span class="token punctuation">)</span> OK
<span class="token number">2</span><span class="token punctuation">)</span> OK
<span class="token number">3</span><span class="token punctuation">)</span> OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GET PROJECT
<span class="token string">&quot;JavaGuide3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事务外部修改 WATCH 监视的 Key：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SET PROJECT <span class="token string">&quot;JavaGuide&quot;</span>
OK
<span class="token operator">&gt;</span> WATCH PROJECT
OK
<span class="token operator">&gt;</span> SET PROJECT <span class="token string">&quot;JavaGuide2&quot;</span>
OK
<span class="token operator">&gt;</span> MULTI
OK
<span class="token operator">&gt;</span> GET <span class="token environment constant">USER</span>
QUEUED
<span class="token operator">&gt;</span> EXEC
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),G={href:"https://redis.io/topics/transactions",target:"_blank",rel:"noopener noreferrer"},N=i('<figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-transactions.png" alt="Redis 事务" tabindex="0"><figcaption>Redis 事务</figcaption></figure><h3 id="redis-事务支持原子性吗" tabindex="-1"><a class="header-anchor" href="#redis-事务支持原子性吗"><span>Redis 事务支持原子性吗？</span></a></h3><p>Redis 的事务和我们平时理解的关系型数据库的事务不同。我们知道事务具有四大特性：<strong>1. 原子性</strong>，<strong>2. 隔离性</strong>，<strong>3. 持久性</strong>，<strong>4. 一致性</strong>。</p><ol><li><strong>原子性（Atomicity）：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li><strong>隔离性（Isolation）：</strong> 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li><li><strong>持久性（Durability）：</strong> 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li><li><strong>一致性（Consistency）：</strong> 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；</li></ol><p>Redis 事务在运行错误的情况下，除了执行过程中出现错误的命令外，其他命令都能正常执行。并且，Redis 事务是不支持回滚（roll back）操作的。因此，Redis 事务其实是不满足原子性的。</p><p>Redis 官网也解释了自己为啥不支持回滚。简单来说就是 Redis 开发者们觉得没必要支持回滚，这样更简单便捷并且性能更好。Redis 开发者觉得即使命令执行错误也应该在开发过程中就被发现而不是生产过程中。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-rollback.png" alt="Redis 为什么不支持回滚" tabindex="0"><figcaption>Redis 为什么不支持回滚</figcaption></figure><p><strong>相关 issue</strong> :</p>',8),A={href:"https://github.com/Snailclimb/JavaGuide/issues/452",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/Snailclimb/JavaGuide/issues/491",target:"_blank",rel:"noopener noreferrer"},I=i(`<h3 id="redis-事务支持持久性吗" tabindex="-1"><a class="header-anchor" href="#redis-事务支持持久性吗"><span>Redis 事务支持持久性吗？</span></a></h3><p>Redis 不同于 Memcached 的很重要一点就是，Redis 支持持久化，而且支持 3 种持久化方式:</p><ul><li>快照（snapshotting，RDB）</li><li>只追加文件（append-only file, AOF）</li><li>RDB 和 AOF 的混合持久化(Redis 4.0 新增)</li></ul><p>与 RDB 持久化相比，AOF 持久化的实时性更好。在 Redis 的配置文件中存在三种不同的 AOF 持久化方式（ <code>fsync</code>策略），它们分别是：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>appendfsync always    <span class="token comment">#每次有数据修改发生时都会调用fsync函数同步AOF文件,fsync完成后线程返回,这样会严重降低Redis的速度</span>
appendfsync everysec  <span class="token comment">#每秒钟调用fsync函数同步一次AOF文件</span>
appendfsync no        <span class="token comment">#让操作系统决定何时进行同步，一般为30秒一次</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AOF 持久化的<code>fsync</code>策略为 no、everysec 时都会存在数据丢失的情况 。always 下可以基本是可以满足持久性要求的，但性能太差，实际开发过程中不会使用。</p><p>因此，Redis 事务的持久性也是没办法保证的。</p><h3 id="如何解决-redis-事务的缺陷" tabindex="-1"><a class="header-anchor" href="#如何解决-redis-事务的缺陷"><span>如何解决 Redis 事务的缺陷？</span></a></h3><p>Redis 从 2.6 版本开始支持执行 Lua 脚本，它的功能和事务非常类似。我们可以利用 Lua 脚本来批量执行多条 Redis 命令，这些 Redis 命令会被提交到 Redis 服务器一次性执行完成，大幅减小了网络开销。</p><p>一段 Lua 脚本可以视作一条命令执行，一段 Lua 脚本执行过程中不会有其他脚本或 Redis 命令同时执行，保证了操作不会被其他指令插入或打扰。</p><p>不过，如果 Lua 脚本运行时出错并中途结束，出错之后的命令是不会被执行的。并且，出错之前执行的命令是无法被撤销的，无法实现类似关系型数据库执行失败可以回滚的那种原子性效果。因此， <strong>严格来说的话，通过 Lua 脚本来批量执行 Redis 命令实际也是不完全满足原子性的。</strong></p><p>如果想要让 Lua 脚本中的命令全部执行，必须保证语句语法和命令都是对的。</p>`,12),M={href:"https://redis.io/docs/manual/programmability/functions-intro/",target:"_blank",rel:"noopener noreferrer"},D=s("h2",{id:"redis-性能优化-重要",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#redis-性能优化-重要"},[s("span",null,"Redis 性能优化（重要）")])],-1),U=s("p",null,"除了下面介绍的内容之外，再推荐两篇不错的文章：",-1),J={href:"https://mp.weixin.qq.com/s/nNEuYw0NlYGhuKKKKoWfcQ",target:"_blank",rel:"noopener noreferrer"},B={href:"https://javaguide.cn/database/redis/redis-common-blocking-problems-summary.html",target:"_blank",rel:"noopener noreferrer"},P=i('<h3 id="使用批量操作减少网络传输" tabindex="-1"><a class="header-anchor" href="#使用批量操作减少网络传输"><span>使用批量操作减少网络传输</span></a></h3><p>一个 Redis 命令的执行可以简化为以下 4 步：</p><ol><li>发送命令</li><li>命令排队</li><li>命令执行</li><li>返回结果</li></ol><p>其中，第 1 步和第 4 步耗费时间之和称为 <strong>Round Trip Time (RTT,往返时间)</strong> ，也就是数据在网络上传输的时间。</p><p>使用批量操作可以减少网络传输次数，进而有效减小网络开销，大幅减少 RTT。</p>',5),F=s("code",null,"read()",-1),H=s("code",null,"write()",-1),z={href:"https://redis.io/docs/manual/pipelining/",target:"_blank",rel:"noopener noreferrer"},W=i('<h4 id="原生批量操作命令" tabindex="-1"><a class="header-anchor" href="#原生批量操作命令"><span>原生批量操作命令</span></a></h4><p>Redis 中有一些原生支持批量操作的命令，比如：</p><ul><li><code>MGET</code>(获取一个或多个指定 key 的值)、<code>MSET</code>(设置一个或多个指定 key 的值)、</li><li><code>HMGET</code>(获取指定哈希表中一个或者多个指定字段的值)、<code>HMSET</code>(同时将一个或多个 field-value 对设置到指定哈希表中)、</li><li><code>SADD</code>（向指定集合添加一个或多个元素）</li><li>……</li></ul><p>不过，在 Redis 官方提供的分片集群解决方案 Redis Cluster 下，使用这些原生批量操作命令可能会存在一些小问题需要解决。就比如说 <code>MGET</code> 无法保证所有的 key 都在同一个 <strong>hash slot</strong>（哈希槽）上，<code>MGET</code>可能还是需要多次网络传输，原子操作也无法保证了。不过，相较于非批量操作，还是可以节省不少网络传输次数。</p><p>整个步骤的简化版如下（通常由 Redis 客户端实现，无需我们自己再手动实现）：</p><ol><li>找到 key 对应的所有 hash slot；</li><li>分别向对应的 Redis 节点发起 <code>MGET</code> 请求获取数据；</li><li>等待所有请求执行结束，重新组装结果数据，保持跟入参 key 的顺序一致，然后返回结果。</li></ol><p>如果想要解决这个多次网络传输的问题，比较常用的办法是自己维护 key 与 slot 的关系。不过这样不太灵活，虽然带来了性能提升，但同样让系统复杂性提升。</p>',7),Y=s("p",null,[e("Redis Cluster 并没有使用一致性哈希，采用的是 "),s("strong",null,"哈希槽分区"),e(" ，每一个键值对都属于一个 "),s("strong",null,"hash slot"),e("（哈希槽） 。当客户端发送命令请求的时候，需要先根据 key 通过上面的计算公示找到的对应的哈希槽，然后再查询哈希槽和节点的映射关系，即可找到目标 Redis 节点。")],-1),Q={href:"https://javaguide.cn/database/redis/redis-cluster.html",target:"_blank",rel:"noopener noreferrer"},V=i('<h4 id="pipeline" tabindex="-1"><a class="header-anchor" href="#pipeline"><span>pipeline</span></a></h4><p>对于不支持批量操作的命令，我们可以利用 <strong>pipeline（流水线)</strong> 将一批 Redis 命令封装成一组，这些 Redis 命令会被一次性提交到 Redis 服务器，只需要一次网络传输。不过，需要注意控制一次批量操作的 <strong>元素个数</strong>(例如 500 以内，实际也和元素字节数有关)，避免网络传输的数据量过大。</p><p>与<code>MGET</code>、<code>MSET</code>等原生批量操作命令一样，pipeline 同样在 Redis Cluster 上使用会存在一些小问题。原因类似，无法保证所有的 key 都在同一个 <strong>hash slot</strong>（哈希槽）上。如果想要使用的话，客户端需要自己维护 key 与 slot 的关系。</p><p>原生批量操作命令和 pipeline 的是有区别的，使用的时候需要注意：</p><ul><li>原生批量操作命令是原子操作，pipeline 是非原子操作。</li><li>pipeline 可以打包不同的命令，原生批量操作命令不可以。</li><li>原生批量操作命令是 Redis 服务端支持实现的，而 pipeline 需要服务端和客户端的共同实现。</li></ul><p>顺带补充一下 pipeline 和 Redis 事务的对比：</p><ul><li>事务是原子操作，pipeline 是非原子操作。两个不同的事务不会同时运行，而 pipeline 可以同时以交错方式执行。</li><li>Redis 事务中每个命令都需要发送到服务端，而 Pipeline 只需要发送一次，请求次数更少。</li></ul><blockquote><p>事务可以看作是一个原子操作，但其实并不满足原子性。当我们提到 Redis 中的原子操作时，主要指的是这个操作（比如事务、Lua 脚本）不会被其他操作（比如其他事务、Lua 脚本）打扰，并不能完全保证这个操作中的所有写命令要么都执行要么都不执行。这主要也是因为 Redis 是不支持回滚操作。</p></blockquote><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-pipeline-vs-transaction.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>另外，pipeline 不适用于执行顺序有依赖关系的一批命令。就比如说，你需要将前一个命令的结果给后续的命令使用，pipeline 就没办法满足你的需求了。对于这种需求，我们可以使用 <strong>Lua 脚本</strong> 。</p><h4 id="lua-脚本" tabindex="-1"><a class="header-anchor" href="#lua-脚本"><span>Lua 脚本</span></a></h4><p>Lua 脚本同样支持批量操作多条命令。一段 Lua 脚本可以视作一条命令执行，可以看作是 <strong>原子操作</strong> 。也就是说，一段 Lua 脚本执行过程中不会有其他脚本或 Redis 命令同时执行，保证了操作不会被其他指令插入或打扰，这是 pipeline 所不具备的。</p><p>并且，Lua 脚本中支持一些简单的逻辑处理比如使用命令读取值并在 Lua 脚本中进行处理，这同样是 pipeline 所不具备的。</p><p>不过， Lua 脚本依然存在下面这些缺陷：</p><ul><li>如果 Lua 脚本运行时出错并中途结束，之后的操作不会进行，但是之前已经发生的写操作不会撤销，所以即使使用了 Lua 脚本，也不能实现类似数据库回滚的原子性。</li><li>Redis Cluster 下 Lua 脚本的原子操作也无法保证了，原因同样是无法保证所有的 key 都在同一个 <strong>hash slot</strong>（哈希槽）上。</li></ul><h3 id="大量-key-集中过期问题" tabindex="-1"><a class="header-anchor" href="#大量-key-集中过期问题"><span>大量 key 集中过期问题</span></a></h3><p>我在前面提到过：对于过期 key，Redis 采用的是 <strong>定期删除+惰性/懒汉式删除</strong> 策略。</p><p>定期删除执行过程中，如果突然遇到大量过期 key 的话，客户端请求必须等待定期清理过期 key 任务线程执行完成，因为这个这个定期任务线程是在 Redis 主线程中执行的。这就导致客户端请求没办法被及时处理，响应速度会比较慢。</p><p><strong>如何解决呢？</strong> 下面是两种常见的方法：</p><ol><li>给 key 设置随机过期时间。</li><li>开启 lazy-free（惰性删除/延迟释放） 。lazy-free 特性是 Redis 4.0 开始引入的，指的是让 Redis 采用异步方式延迟释放 key 使用的内存，将该操作交给单独的子线程处理，避免阻塞主线程。</li></ol><p>个人建议不管是否开启 lazy-free，我们都尽量给 key 设置随机过期时间。</p><h3 id="redis-bigkey-大-key" tabindex="-1"><a class="header-anchor" href="#redis-bigkey-大-key"><span>Redis bigkey（大 Key）</span></a></h3><h4 id="什么是-bigkey" tabindex="-1"><a class="header-anchor" href="#什么是-bigkey"><span>什么是 bigkey？</span></a></h4><p>简单来说，如果一个 key 对应的 value 所占用的内存比较大，那这个 key 就可以看作是 bigkey。具体多大才算大呢？有一个不是特别精确的参考标准：</p><ul><li>String 类型的 value 超过 1MB</li><li>复合类型（List、Hash、Set、Sorted Set 等）的 value 包含的元素超过 5000 个（不过，对于复合类型的 value 来说，不一定包含的元素越多，占用的内存就越多）。</li></ul><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/bigkey-criterion.png" alt="bigkey 判定标准" tabindex="0"><figcaption>bigkey 判定标准</figcaption></figure><h4 id="bigkey-是怎么产生的-有什么危害" tabindex="-1"><a class="header-anchor" href="#bigkey-是怎么产生的-有什么危害"><span>bigkey 是怎么产生的？有什么危害？</span></a></h4><p>bigkey 通常是由于下面这些原因产生的：</p><ul><li>程序设计不当，比如直接使用 String 类型存储较大的文件对应的二进制数据。</li><li>对于业务的数据规模考虑不周到，比如使用集合类型的时候没有考虑到数据量的快速增长。</li><li>未及时清理垃圾数据，比如哈希中冗余了大量的无用键值对。</li></ul><p>bigkey 除了会消耗更多的内存空间和带宽，还会对性能造成比较大的影响。</p>',30),X=i(`<ol><li>客户端超时阻塞：由于 Redis 执行命令是单线程处理，然后在操作大 key 时会比较耗时，那么就会阻塞 Redis，从客户端这一视角看，就是很久很久都没有响应。</li><li>网络阻塞：每次获取大 key 产生的网络流量较大，如果一个 key 的大小是 1 MB，每秒访问量为 1000，那么每秒会产生 1000MB 的流量，这对于普通千兆网卡的服务器来说是灾难性的。</li><li>工作线程阻塞：如果使用 del 删除大 key 时，会阻塞工作线程，这样就没办法处理后续的命令。</li></ol><p>大 key 造成的阻塞问题还会进一步影响到主从同步和集群扩容。</p><p>综上，大 key 带来的潜在问题是非常多的，我们应该尽量避免 Redis 中存在 bigkey。</p><h4 id="如何发现-bigkey" tabindex="-1"><a class="header-anchor" href="#如何发现-bigkey"><span>如何发现 bigkey？</span></a></h4><p><strong>1、使用 Redis 自带的 <code>--bigkeys</code> 参数来查找。</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># redis-cli -p 6379 --bigkeys</span>

<span class="token comment"># Scanning the entire keyspace to find biggest keys as well as</span>
<span class="token comment"># average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec</span>
<span class="token comment"># per 100 SCAN commands (not usually needed).</span>

<span class="token punctuation">[</span>00.00%<span class="token punctuation">]</span> Biggest string found so far <span class="token string">&#39;&quot;ballcat:oauth:refresh_auth:f6cdb384-9a9d-4f2f-af01-dc3f28057c20&quot;&#39;</span> with <span class="token number">4437</span> bytes
<span class="token punctuation">[</span>00.00%<span class="token punctuation">]</span> Biggest list   found so far <span class="token string">&#39;&quot;my-list&quot;&#39;</span> with <span class="token number">17</span> items

-------- summary -------

Sampled <span class="token number">5</span> keys <span class="token keyword">in</span> the keyspace<span class="token operator">!</span>
Total key length <span class="token keyword">in</span> bytes is <span class="token number">264</span> <span class="token punctuation">(</span>avg len <span class="token number">52.80</span><span class="token punctuation">)</span>

Biggest   list found <span class="token string">&#39;&quot;my-list&quot;&#39;</span> has <span class="token number">17</span> items
Biggest string found <span class="token string">&#39;&quot;ballcat:oauth:refresh_auth:f6cdb384-9a9d-4f2f-af01-dc3f28057c20&quot;&#39;</span> has <span class="token number">4437</span> bytes

<span class="token number">1</span> lists with <span class="token number">17</span> items <span class="token punctuation">(</span><span class="token number">20.00</span>% of keys, avg size <span class="token number">17.00</span><span class="token punctuation">)</span>
<span class="token number">0</span> hashs with <span class="token number">0</span> fields <span class="token punctuation">(</span>00.00% of keys, avg size <span class="token number">0.00</span><span class="token punctuation">)</span>
<span class="token number">4</span> strings with <span class="token number">4831</span> bytes <span class="token punctuation">(</span><span class="token number">80.00</span>% of keys, avg size <span class="token number">1207.75</span><span class="token punctuation">)</span>
<span class="token number">0</span> streams with <span class="token number">0</span> entries <span class="token punctuation">(</span>00.00% of keys, avg size <span class="token number">0.00</span><span class="token punctuation">)</span>
<span class="token number">0</span> sets with <span class="token number">0</span> members <span class="token punctuation">(</span>00.00% of keys, avg size <span class="token number">0.00</span><span class="token punctuation">)</span>
<span class="token number">0</span> zsets with <span class="token number">0</span> members <span class="token punctuation">(</span>00.00% of keys, avg size <span class="token number">0.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从这个命令的运行结果，我们可以看出：这个命令会扫描(Scan) Redis 中的所有 key ，会对 Redis 的性能有一点影响。并且，这种方式只能找出每种数据结构 top 1 bigkey（占用内存最大的 String 数据类型，包含元素最多的复合数据类型）。然而，一个 key 的元素多并不代表占用内存也多，需要我们根据具体的业务情况来进一步判断。</p><p>在线上执行该命令时，为了降低对 Redis 的影响，需要指定 <code>-i</code> 参数控制扫描的频率。<code>redis-cli -p 6379 --bigkeys -i 3</code> 表示扫描过程中每次扫描后休息的时间间隔为 3 秒。</p><p><strong>2、使用 Redis 自带的 SCAN 命令</strong></p><p><code>SCAN</code> 命令可以按照一定的模式和数量返回匹配的 key。获取了 key 之后，可以利用 <code>STRLEN</code>、<code>HLEN</code>、<code>LLEN</code>等命令返回其长度或成员数量。</p><table><thead><tr><th>数据结构</th><th>命令</th><th>复杂度</th><th>结果（对应 key）</th></tr></thead><tbody><tr><td>String</td><td>STRLEN</td><td>O(1)</td><td>字符串值的长度</td></tr><tr><td>Hash</td><td>HLEN</td><td>O(1)</td><td>哈希表中字段的数量</td></tr><tr><td>List</td><td>LLEN</td><td>O(1)</td><td>列表元素数量</td></tr><tr><td>Set</td><td>SCARD</td><td>O(1)</td><td>集合元素数量</td></tr><tr><td>Sorted Set</td><td>ZCARD</td><td>O(1)</td><td>有序集合的元素数量</td></tr></tbody></table><p>对于集合类型还可以使用 <code>MEMORY USAGE</code> 命令（Redis 4.0+），这个命令会返回键值对占用的内存空间。</p><p><strong>3、借助开源工具分析 RDB 文件。</strong></p><p>通过分析 RDB 文件来找出 big key。这种方案的前提是你的 Redis 采用的是 RDB 持久化。</p><p>网上有现成的代码/工具可以直接拿来使用：</p>`,15),Z={href:"https://github.com/sripathikrishnan/redis-rdb-tools",target:"_blank",rel:"noopener noreferrer"},$={href:"https://github.com/weiyanwei412/rdb_bigkeys",target:"_blank",rel:"noopener noreferrer"},ss=s("p",null,[s("strong",null,"4、借助公有云的 Redis 分析服务。")],-1),es=s("p",null,"如果你用的是公有云的 Redis 服务的话，可以看看其是否提供了 key 分析功能（一般都提供了）。",-1),ns={href:"https://www.alibabacloud.com/help/zh/apsaradb-for-redis/latest/use-the-real-time-key-statistics-feature",target:"_blank",rel:"noopener noreferrer"},as=i(`<figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/aliyun-key-analysis.png" alt="阿里云Key分析" tabindex="0"><figcaption>阿里云Key分析</figcaption></figure><h4 id="如何处理-bigkey" tabindex="-1"><a class="header-anchor" href="#如何处理-bigkey"><span>如何处理 bigkey？</span></a></h4><p>bigkey 的常见处理以及优化办法如下（这些方法可以配合起来使用）：</p><ul><li><strong>分割 bigkey</strong>：将一个 bigkey 分割为多个小 key。例如，将一个含有上万字段数量的 Hash 按照一定策略（比如二次哈希）拆分为多个 Hash。</li><li><strong>手动清理</strong>：Redis 4.0+ 可以使用 <code>UNLINK</code> 命令来异步删除一个或多个指定的 key。Redis 4.0 以下可以考虑使用 <code>SCAN</code> 命令结合 <code>DEL</code> 命令来分批次删除。</li><li><strong>采用合适的数据结构</strong>：例如，文件二进制数据不使用 String 保存、使用 HyperLogLog 统计页面 UV、Bitmap 保存状态信息（0/1）。</li><li><strong>开启 lazy-free（惰性删除/延迟释放）</strong> ：lazy-free 特性是 Redis 4.0 开始引入的，指的是让 Redis 采用异步方式延迟释放 key 使用的内存，将该操作交给单独的子线程处理，避免阻塞主线程。</li></ul><h3 id="redis-hotkey-热-key" tabindex="-1"><a class="header-anchor" href="#redis-hotkey-热-key"><span>Redis hotkey（热 Key）</span></a></h3><h4 id="什么是-hotkey" tabindex="-1"><a class="header-anchor" href="#什么是-hotkey"><span>什么是 hotkey？</span></a></h4><p>如果一个 key 的访问次数比较多且明显多于其他 key 的话，那这个 key 就可以看作是 <strong>hotkey（热 Key）</strong>。例如在 Redis 实例的每秒处理请求达到 5000 次，而其中某个 key 的每秒访问量就高达 2000 次，那这个 key 就可以看作是 hotkey。</p><p>hotkey 出现的原因主要是某个热点数据访问量暴增，如重大的热搜事件、参与秒杀的商品。</p><h4 id="hotkey-有什么危害" tabindex="-1"><a class="header-anchor" href="#hotkey-有什么危害"><span>hotkey 有什么危害？</span></a></h4><p>处理 hotkey 会占用大量的 CPU 和带宽，可能会影响 Redis 实例对其他请求的正常处理。此外，如果突然访问 hotkey 的请求超出了 Redis 的处理能力，Redis 就会直接宕机。这种情况下，大量请求将落到后面的数据库上，可能会导致数据库崩溃。</p><p>因此，hotkey 很可能成为系统性能的瓶颈点，需要单独对其进行优化，以确保系统的高可用性和稳定性。</p><h4 id="如何发现-hotkey" tabindex="-1"><a class="header-anchor" href="#如何发现-hotkey"><span>如何发现 hotkey？</span></a></h4><p><strong>1、使用 Redis 自带的 <code>--hotkeys</code> 参数来查找。</strong></p><p>Redis 4.0.3 版本中新增了 <code>hotkeys</code> 参数，该参数能够返回所有 key 的被访问次数。</p><p>使用该方案的前提条件是 Redis Server 的 <code>maxmemory-policy</code> 参数设置为 LFU 算法，不然就会出现如下所示的错误。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># redis-cli -p 6379 --hotkeys</span>

<span class="token comment"># Scanning the entire keyspace to find hot keys as well as</span>
<span class="token comment"># average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec</span>
<span class="token comment"># per 100 SCAN commands (not usually needed).</span>

Error: ERR An LFU maxmemory policy is not selected, access frequency not tracked. Please note that when switching between policies at runtime LRU and LFU data will take some <span class="token function">time</span> to adjust.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redis 中有两种 LFU 算法：</p><ol><li><strong>volatile-lfu（least frequently used）</strong>：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选最不经常使用的数据淘汰。</li><li><strong>allkeys-lfu（least frequently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。</li></ol><p>以下是配置文件 <code>redis.conf</code> 中的示例：</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># 使用 volatile-lfu 策略</span>
<span class="token key attr-name">maxmemory-policy</span> <span class="token value attr-value">volatile-lfu</span>

<span class="token comment"># 或者使用 allkeys-lfu 策略</span>
<span class="token key attr-name">maxmemory-policy</span> <span class="token value attr-value">allkeys-lfu</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，<code>hotkeys</code> 参数命令也会增加 Redis 实例的 CPU 和内存消耗（全局扫描），因此需要谨慎使用。</p><p><strong>2、使用<code>MONITOR</code> 命令。</strong></p><p><code>MONITOR</code> 命令是 Redis 提供的一种实时查看 Redis 的所有操作的方式，可以用于临时监控 Redis 实例的操作情况，包括读写、删除等操作。</p><p>由于该命令对 Redis 性能的影响比较大，因此禁止长时间开启 <code>MONITOR</code>（生产环境中建议谨慎使用该命令）。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code># redis<span class="token operator">-</span>cli
<span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">MONITOR</span>
<span class="token constant">OK</span>
<span class="token number">1683638260.637378</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">61516</span><span class="token punctuation">]</span> <span class="token string">&quot;ping&quot;</span>
<span class="token number">1683638267.144236</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">61518</span><span class="token punctuation">]</span> <span class="token string">&quot;smembers&quot;</span> <span class="token string">&quot;mySet&quot;</span>
<span class="token number">1683638268.941863</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">61518</span><span class="token punctuation">]</span> <span class="token string">&quot;smembers&quot;</span> <span class="token string">&quot;mySet&quot;</span>
<span class="token number">1683638269.551671</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">61518</span><span class="token punctuation">]</span> <span class="token string">&quot;smembers&quot;</span> <span class="token string">&quot;mySet&quot;</span>
<span class="token number">1683638270.646256</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">61516</span><span class="token punctuation">]</span> <span class="token string">&quot;ping&quot;</span>
<span class="token number">1683638270.849551</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">61518</span><span class="token punctuation">]</span> <span class="token string">&quot;smembers&quot;</span> <span class="token string">&quot;mySet&quot;</span>
<span class="token number">1683638271.926945</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">61518</span><span class="token punctuation">]</span> <span class="token string">&quot;smembers&quot;</span> <span class="token string">&quot;mySet&quot;</span>
<span class="token number">1683638274.276599</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">61518</span><span class="token punctuation">]</span> <span class="token string">&quot;smembers&quot;</span> <span class="token string">&quot;mySet2&quot;</span>
<span class="token number">1683638276.327234</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">172.17</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">61518</span><span class="token punctuation">]</span> <span class="token string">&quot;smembers&quot;</span> <span class="token string">&quot;mySet&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在发生紧急情况时，我们可以选择在合适的时机短暂执行 <code>MONITOR</code> 命令并将输出重定向至文件，在关闭 <code>MONITOR</code> 命令后通过对文件中请求进行归类分析即可找出这段时间中的 hotkey。</p><p><strong>3、借助开源项目。</strong></p>`,27),is={href:"https://gitee.com/jd-platform-opensource/hotkey",target:"_blank",rel:"noopener noreferrer"},ts=s("figure",null,[s("img",{src:"https://oss.javaguide.cn/github/javaguide/database/redis/jd-hotkey.png",alt:"京东零售开源的 hotkey",tabindex:"0"}),s("figcaption",null,"京东零售开源的 hotkey")],-1),ls=s("p",null,[s("strong",null,"4、根据业务情况提前预估。")],-1),os=s("p",null,"可以根据业务情况来预估一些 hotkey，比如参与秒杀活动的商品数据等。不过，我们无法预估所有 hotkey 的出现，比如突发的热点新闻事件等。",-1),ps=s("p",null,[s("strong",null,"5、业务代码中记录分析。")],-1),ds=s("p",null,"在业务代码中添加相应的逻辑对 key 的访问情况进行记录分析。不过，这种方式会让业务代码的复杂性增加，一般也不会采用。",-1),rs=s("p",null,[s("strong",null,"6、借助公有云的 Redis 分析服务。")],-1),cs=s("p",null,"如果你用的是公有云的 Redis 服务的话，可以看看其是否提供了 key 分析功能（一般都提供了）。",-1),us={href:"https://www.alibabacloud.com/help/zh/apsaradb-for-redis/latest/use-the-real-time-key-statistics-feature",target:"_blank",rel:"noopener noreferrer"},hs=i(`<figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/aliyun-key-analysis.png" alt="阿里云Key分析" tabindex="0"><figcaption>阿里云Key分析</figcaption></figure><h4 id="如何解决-hotkey" tabindex="-1"><a class="header-anchor" href="#如何解决-hotkey"><span>如何解决 hotkey？</span></a></h4><p>hotkey 的常见处理以及优化办法如下（这些方法可以配合起来使用）：</p><ul><li><strong>读写分离</strong>：主节点处理写请求，从节点处理读请求。</li><li><strong>使用 Redis Cluster</strong>：将热点数据分散存储在多个 Redis 节点上。</li><li><strong>二级缓存</strong>：hotkey 采用二级缓存的方式进行处理，将 hotkey 存放一份到 JVM 本地内存中（可以用 Caffeine）。</li></ul><p>除了这些方法之外，如果你使用的公有云的 Redis 服务话，还可以留意其提供的开箱即用的解决方案。</p><p>这里以阿里云 Redis 为例说明，它支持通过代理查询缓存功能（Proxy Query Cache）优化热点 Key 问题。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/aliyun-hotkey-proxy-query-cache.png" alt="通过阿里云的Proxy Query Cache优化热点Key问题" tabindex="0"><figcaption>通过阿里云的Proxy Query Cache优化热点Key问题</figcaption></figure><h3 id="慢查询命令" tabindex="-1"><a class="header-anchor" href="#慢查询命令"><span>慢查询命令</span></a></h3><h4 id="为什么会有慢查询命令" tabindex="-1"><a class="header-anchor" href="#为什么会有慢查询命令"><span>为什么会有慢查询命令？</span></a></h4><p>我们知道一个 Redis 命令的执行可以简化为以下 4 步：</p><ol><li>发送命令</li><li>命令排队</li><li>命令执行</li><li>返回结果</li></ol><p>Redis 慢查询统计的是命令执行这一步骤的耗时，慢查询命令也就是那些命令执行时间较长的命令。</p><p>Redis 为什么会有慢查询命令呢？</p><p>Redis 中的大部分命令都是 O(1)时间复杂度，但也有少部分 O(n) 时间复杂度的命令，例如：</p><ul><li><code>KEYS *</code>：会返回所有符合规则的 key。</li><li><code>HGETALL</code>：会返回一个 Hash 中所有的键值对。</li><li><code>LRANGE</code>：会返回 List 中指定范围内的元素。</li><li><code>SMEMBERS</code>：返回 Set 中的所有元素。</li><li><code>SINTER</code>/<code>SUNION</code>/<code>SDIFF</code>：计算多个 Set 的交集/并集/差集。</li><li>……</li></ul><p>由于这些命令时间复杂度是 O(n)，有时候也会全表扫描，随着 n 的增大，执行耗时也会越长。不过， 这些命令并不是一定不能使用，但是需要明确 N 的值。另外，有遍历的需求可以使用 <code>HSCAN</code>、<code>SSCAN</code>、<code>ZSCAN</code> 代替。</p><p>除了这些 O(n)时间复杂度的命令可能会导致慢查询之外， 还有一些时间复杂度可能在 O(N) 以上的命令，例如：</p><ul><li><code>ZRANGE</code>/<code>ZREVRANGE</code>：返回指定 Sorted Set 中指定排名范围内的所有元素。时间复杂度为 O(log(n)+m)，n 为所有元素的数量， m 为返回的元素数量，当 m 和 n 相当大时，O(n) 的时间复杂度更小。</li><li><code>ZREMRANGEBYRANK</code>/<code>ZREMRANGEBYSCORE</code>：移除 Sorted Set 中指定排名范围/指定 score 范围内的所有元素。时间复杂度为 O(log(n)+m)，n 为所有元素的数量， m 被删除元素的数量，当 m 和 n 相当大时，O(n) 的时间复杂度更小。</li><li>……</li></ul><h4 id="如何找到慢查询命令" tabindex="-1"><a class="header-anchor" href="#如何找到慢查询命令"><span>如何找到慢查询命令？</span></a></h4><p>在 <code>redis.conf</code> 文件中，我们可以使用 <code>slowlog-log-slower-than</code> 参数设置耗时命令的阈值，并使用 <code>slowlog-max-len</code> 参数设置耗时命令的最大记录条数。</p><p>当 Redis 服务器检测到执行时间超过 <code>slowlog-log-slower-than</code>阈值的命令时，就会将该命令记录在慢查询日志(slow log) 中，这点和 MySQL 记录慢查询语句类似。当慢查询日志超过设定的最大记录条数之后，Redis 会把最早的执行命令依次舍弃。</p><p>⚠️注意：由于慢查询日志会占用一定内存空间，如果设置最大记录条数过大，可能会导致内存占用过高的问题。</p><p><code>slowlog-log-slower-than</code>和<code>slowlog-max-len</code>的默认配置如下(可以自行修改)：</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token comment"># The following time is expressed in microseconds, so 1000000 is equivalent</span>
<span class="token comment"># to one second. Note that a negative number disables the slow log, while</span>
<span class="token comment"># a value of zero forces the logging of every command.</span>
slowlog-log-slower-than 10000

<span class="token comment"># There is no limit to this length. Just be aware that it will consume memory.</span>
<span class="token comment"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span>
slowlog-max-len 128
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了修改配置文件之外，你也可以直接通过 <code>CONFIG</code> 命令直接设置：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 命令执行耗时超过 10000 微妙（即10毫秒）就会被记录</span>
CONFIG SET slowlog-log-slower-than <span class="token number">10000</span>
<span class="token comment"># 只保留最近 128 条耗时命令</span>
CONFIG SET slowlog-max-len <span class="token number">128</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取慢查询日志的内容很简单，直接使用<code>SLOWLOG GET</code> 命令即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">6379</span><span class="token operator">&gt;</span> <span class="token constant">SLOWLOG</span> <span class="token constant">GET</span> #慢日志查询
 <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1684326682</span>
   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">12000</span>
   <span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;KEYS&quot;</span>
      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;*&quot;</span>
   <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;172.17.0.1:61152&quot;</span>
   <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;&quot;</span>
  <span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>慢查询日志中的每个条目都由以下六个值组成：</p><ol><li>唯一渐进的日志标识符。</li><li>处理记录命令的 Unix 时间戳。</li><li>执行所需的时间量，以微秒为单位。</li><li>组成命令参数的数组。</li><li>客户端 IP 地址和端口。</li><li>客户端名称。</li></ol><p><code>SLOWLOG GET</code> 命令默认返回最近 10 条的的慢查询命令，你也自己可以指定返回的慢查询命令的数量 <code>SLOWLOG GET N</code>。</p><p>下面是其他比较常用的慢查询相关的命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 返回慢查询命令的数量</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SLOWLOG LEN
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">128</span>
<span class="token comment"># 清空慢查询命令</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SLOWLOG RESET
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis-内存碎片" tabindex="-1"><a class="header-anchor" href="#redis-内存碎片"><span>Redis 内存碎片</span></a></h3><p><strong>相关问题</strong>：</p><ol><li>什么是内存碎片?为什么会有 Redis 内存碎片?</li><li>如何清理 Redis 内存碎片？</li></ol>`,36),gs=s("strong",null,"参考答案",-1),ms={href:"https://javaguide.cn/database/redis/redis-memory-fragmentation.html",target:"_blank",rel:"noopener noreferrer"},ks=i(`<h2 id="redis-生产问题-重要" tabindex="-1"><a class="header-anchor" href="#redis-生产问题-重要"><span>Redis 生产问题（重要）</span></a></h2><h3 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透"><span>缓存穿透</span></a></h3><h4 id="什么是缓存穿透" tabindex="-1"><a class="header-anchor" href="#什么是缓存穿透"><span>什么是缓存穿透？</span></a></h4><p>缓存穿透说简单点就是大量请求的 key 是不合理的，<strong>根本不存在于缓存中，也不存在于数据库中</strong> 。这就导致这些请求直接到了数据库上，根本没有经过缓存这一层，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-cache-penetration.png" alt="缓存穿透" tabindex="0"><figcaption>缓存穿透</figcaption></figure><p>举个例子：某个黑客故意制造一些非法的 key 发起大量请求，导致大量请求落到数据库，结果数据库上也没有查到对应的数据。也就是说这些请求最终都落到了数据库上，对数据库造成了巨大的压力。</p><h4 id="有哪些解决办法" tabindex="-1"><a class="header-anchor" href="#有哪些解决办法"><span>有哪些解决办法？</span></a></h4><p>最基本的就是首先做好参数校验，一些不合法的参数请求直接抛出异常信息返回给客户端。比如查询的数据库 id 不能小于 0、传入的邮箱格式不对的时候直接返回错误消息给客户端等等。</p><p><strong>1）缓存无效 key</strong></p><p>如果缓存和数据库都查不到某个 key 的数据就写一个到 Redis 中去并设置过期时间，具体命令如下：<code>SET key value EX 10086</code> 。这种方式可以解决请求的 key 变化不频繁的情况，如果黑客恶意攻击，每次构建不同的请求 key，会导致 Redis 中缓存大量无效的 key 。很明显，这种方案并不能从根本上解决此问题。如果非要用这种方式来解决穿透问题的话，尽量将无效的 key 的过期时间设置短一点比如 1 分钟。</p><p>另外，这里多说一嘴，一般情况下我们是这样设计 key 的：<code>表名:列名:主键名:主键值</code> 。</p><p>如果用 Java 代码展示的话，差不多是下面这样的：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getObjectInclNullById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 从缓存中获取数据</span>
    <span class="token class-name">Object</span> cacheValue <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 缓存为空</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从数据库中获取</span>
        <span class="token class-name">Object</span> storageValue <span class="token operator">=</span> storage<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 缓存空对象</span>
        cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> storageValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果存储数据为空，需要设置一个过期时间(300秒)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>storageValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 必须设置过期时间，否则有被攻击的风险</span>
            cache<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> storageValue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cacheValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2）布隆过滤器</strong></p><p>布隆过滤器是一个非常神奇的数据结构，通过它我们可以非常方便地判断一个给定数据是否存在于海量数据中。我们可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。相比于我们平时常用的 List、Map、Set 等数据结构，它占用空间更少并且效率更高，但是缺点是其返回的结果是概率性的，而不是非常准确的。理论情况下添加到集合中的元素越多，误报的可能性就越大。并且，存放在布隆过滤器的数据不容易删除。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-simple-schematic-diagram.png" alt="Bloom Filter 的简单原理示意图" tabindex="0"><figcaption>Bloom Filter 的简单原理示意图</figcaption></figure><p>Bloom Filter 会使用一个较大的 bit 数组来保存所有的数据，数组中的每个元素都只占用 1 bit ，并且每个元素只能是 0 或者 1（代表 false 或者 true），这也是 Bloom Filter 节省内存的核心所在。这样来算的话，申请一个 100w 个元素的位数组只占用 1000000Bit / 8 = 125000 Byte = 125000/1024 KB ≈ 122KB 的空间。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-bit-table.png" alt="位数组" tabindex="0"><figcaption>位数组</figcaption></figure><p>具体是这样做的：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。</p><p>加入布隆过滤器之后的缓存处理流程图如下。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-cache-penetration-bloom-filter.png" alt="加入布隆过滤器之后的缓存处理流程图" tabindex="0"><figcaption>加入布隆过滤器之后的缓存处理流程图</figcaption></figure>`,21),bs={href:"https://javaguide.cn/cs-basics/data-structure/bloom-filter.html",target:"_blank",rel:"noopener noreferrer"},vs=i('<p><strong>3）接口限流</strong></p><p>根据用户或者 IP 对接口进行限流，对于异常频繁的访问行为，还可以采取黑名单机制，例如将异常 IP 列入黑名单。</p><h3 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿"><span>缓存击穿</span></a></h3><h4 id="什么是缓存击穿" tabindex="-1"><a class="header-anchor" href="#什么是缓存击穿"><span>什么是缓存击穿？</span></a></h4><p>缓存击穿中，请求的 key 对应的是 <strong>热点数据</strong> ，该数据 <strong>存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期）</strong> 。这就可能会导致瞬时大量的请求直接打到了数据库上，对数据库造成了巨大的压力，可能直接就被这么多请求弄宕机了。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-cache-breakdown.png" alt="缓存击穿" tabindex="0"><figcaption>缓存击穿</figcaption></figure><p>举个例子：秒杀进行过程中，缓存中的某个秒杀商品的数据突然过期，这就导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成了巨大的压力。</p><h4 id="有哪些解决办法-1" tabindex="-1"><a class="header-anchor" href="#有哪些解决办法-1"><span>有哪些解决办法？</span></a></h4><ol><li>设置热点数据永不过期或者过期时间比较长。</li><li>针对热点数据提前预热，将其存入缓存中并设置合理的过期时间比如秒杀场景下的数据在秒杀结束之前不过期。</li><li>请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。</li></ol><h4 id="缓存穿透和缓存击穿有什么区别" tabindex="-1"><a class="header-anchor" href="#缓存穿透和缓存击穿有什么区别"><span>缓存穿透和缓存击穿有什么区别？</span></a></h4><p>缓存穿透中，请求的 key 既不存在于缓存中，也不存在于数据库中。</p><p>缓存击穿中，请求的 key 对应的是 <strong>热点数据</strong> ，该数据 <strong>存在于数据库中，但不存在于缓存中（通常是因为缓存中的那份数据已经过期）</strong> 。</p><h3 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩"><span>缓存雪崩</span></a></h3><h4 id="什么是缓存雪崩" tabindex="-1"><a class="header-anchor" href="#什么是缓存雪崩"><span>什么是缓存雪崩？</span></a></h4><p>我发现缓存雪崩这名字起的有点意思，哈哈。</p><p>实际上，缓存雪崩描述的就是这样一个简单的场景：<strong>缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力。</strong> 这就好比雪崩一样，摧枯拉朽之势，数据库的压力可想而知，可能直接就被这么多请求弄宕机了。</p><p>另外，缓存服务宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-cache-avalanche.png" alt="缓存雪崩" tabindex="0"><figcaption>缓存雪崩</figcaption></figure><p>举个例子：数据库中的大量数据在同一时间过期，这个时候突然有大量的请求需要访问这些过期的数据。这就导致大量的请求直接落到数据库上，对数据库造成了巨大的压力。</p><h4 id="有哪些解决办法-2" tabindex="-1"><a class="header-anchor" href="#有哪些解决办法-2"><span>有哪些解决办法？</span></a></h4><p><strong>针对 Redis 服务不可用的情况：</strong></p><ol><li>采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。</li><li>限流，避免同时处理大量的请求。</li><li>多级缓存，例如本地缓存+Redis 缓存的组合，当 Redis 缓存出现问题时，还可以从本地缓存中获取到部分数据。</li></ol><p><strong>针对热点缓存失效的情况：</strong></p><ol><li>设置不同的失效时间比如随机设置缓存的失效时间。</li><li>缓存永不失效（不太推荐，实用性太差）。</li><li>缓存预热，也就是在程序启动后或运行过程中，主动将热点数据加载到缓存中。</li></ol><p><strong>缓存预热如何实现？</strong></p><p>常见的缓存预热方式有两种：</p><ol><li>使用定时任务，比如 xxl-job，来定时触发缓存预热的逻辑，将数据库中的热点数据查询出来并存入缓存中。</li><li>使用消息队列，比如 Kafka，来异步地进行缓存预热，将数据库中的热点数据的主键或者 ID 发送到消息队列中，然后由缓存服务消费消息队列中的数据，根据主键或者 ID 查询数据库并更新缓存。</li></ol><h4 id="缓存雪崩和缓存击穿有什么区别" tabindex="-1"><a class="header-anchor" href="#缓存雪崩和缓存击穿有什么区别"><span>缓存雪崩和缓存击穿有什么区别？</span></a></h4><p>缓存雪崩和缓存击穿比较像，但缓存雪崩导致的原因是缓存中的大量或者所有数据失效，缓存击穿导致的原因主要是某个热点数据不存在与缓存中（通常是因为缓存中的那份数据已经过期）。</p><h3 id="如何保证缓存和数据库数据的一致性" tabindex="-1"><a class="header-anchor" href="#如何保证缓存和数据库数据的一致性"><span>如何保证缓存和数据库数据的一致性？</span></a></h3><p>细说的话可以扯很多，但是我觉得其实没太大必要（小声 BB：很多解决方案我也没太弄明白）。我个人觉得引入缓存之后，如果为了短时间的不一致性问题，选择让系统设计变得更加复杂的话，完全没必要。</p><p>下面单独对 <strong>Cache Aside Pattern（旁路缓存模式）</strong> 来聊聊。</p><p>Cache Aside Pattern 中遇到写请求是这样的：更新 DB，然后直接删除 cache 。</p><p>如果更新数据库成功，而删除缓存这一步失败的情况的话，简单说两个解决方案：</p><ol><li><strong>缓存失效时间变短（不推荐，治标不治本）</strong>：我们让缓存数据的过期时间变短，这样的话缓存就会从数据库中加载数据。另外，这种解决办法对于先操作缓存后操作数据库的场景不适用。</li><li><strong>增加 cache 更新重试机制（常用）</strong>：如果 cache 服务当前不可用导致缓存删除失败的话，我们就隔一段时间进行重试，重试次数可以自己定。如果多次重试还是失败的话，我们可以把当前更新失败的 key 存入队列中，等缓存服务可用之后，再将缓存中对应的 key 删除即可。</li></ol>',35),ys={href:"https://mp.weixin.qq.com/s?__biz=MzIyOTYxNDI5OA==&mid=2247487312&idx=1&sn=fa19566f5729d6598155b5c676eee62d&chksm=e8beb8e5dfc931f3e35655da9da0b61c79f2843101c130cf38996446975014f958a6481aacf1&scene=178&cur_album_id=1699766580538032128#rd",target:"_blank",rel:"noopener noreferrer"},Rs=s("h3",{id:"哪些情况可能会导致-redis-阻塞",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#哪些情况可能会导致-redis-阻塞"},[s("span",null,"哪些情况可能会导致 Redis 阻塞？")])],-1),fs={href:"https://javaguide.cn/database/redis/redis-common-blocking-problems-summary.html",target:"_blank",rel:"noopener noreferrer"},_s=i('<h2 id="redis-集群" tabindex="-1"><a class="header-anchor" href="#redis-集群"><span>Redis 集群</span></a></h2><p><strong>Redis Sentinel</strong>：</p><ol><li>什么是 Sentinel？ 有什么用？</li><li>Sentinel 如何检测节点是否下线？主观下线与客观下线的区别?</li><li>Sentinel 是如何实现故障转移的？</li><li>为什么建议部署多个 sentinel 节点（哨兵集群）？</li><li>Sentinel 如何选择出新的 master（选举机制）?</li><li>如何从 Sentinel 集群中选择出 Leader ？</li><li>Sentinel 可以防止脑裂吗？</li></ol><p><strong>Redis Cluster</strong>：</p><ol><li>为什么需要 Redis Cluster？解决了什么问题？有什么优势？</li><li>Redis Cluster 是如何分片的？</li><li>为什么 Redis Cluster 的哈希槽是 16384 个?</li><li>如何确定给定 key 的应该分布到哪个哈希槽中？</li><li>Redis Cluster 支持重新分配哈希槽吗？</li><li>Redis Cluster 扩容缩容期间可以提供服务吗？</li><li>Redis Cluster 中的节点是怎么进行通信的？</li></ol>',5),Es=s("strong",null,"参考答案",-1),xs={href:"https://javaguide.cn/database/redis/redis-cluster.html",target:"_blank",rel:"noopener noreferrer"},Ss=i('<h2 id="redis-使用规范" tabindex="-1"><a class="header-anchor" href="#redis-使用规范"><span>Redis 使用规范</span></a></h2><p>实际使用 Redis 的过程中，我们尽量要准守一些常见的规范，比如：</p><ol><li>使用连接池：避免频繁创建关闭客户端连接。</li><li>尽量不使用 O(n)指令，使用 O(n) 命令时要关注 n 的数量：像 <code>KEYS *</code>、<code>HGETALL</code>、<code>LRANGE</code>、<code>SMEMBERS</code>、<code>SINTER</code>/<code>SUNION</code>/<code>SDIFF</code>等 O(n) 命令并非不能使用，但是需要明确 n 的值。另外，有遍历的需求可以使用 <code>HSCAN</code>、<code>SSCAN</code>、<code>ZSCAN</code> 代替。</li><li>使用批量操作减少网络传输：原生批量操作命令（比如 <code>MGET</code>、<code>MSET</code>等等）、pipeline、Lua 脚本。</li><li>尽量不适用 Redis 事务：Redis 事务实现的功能比较鸡肋，可以使用 Lua 脚本代替。</li><li>禁止长时间开启 monitor：对性能影响比较大。</li><li>控制 key 的生命周期：避免 Redis 中存放了太多不经常被访问的数据。</li><li>……</li></ol>',3),Ts={href:"https://developer.aliyun.com/article/531067",target:"_blank",rel:"noopener noreferrer"},Os=s("h2",{id:"参考",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#参考"},[s("span",null,"参考")])],-1),qs=s("li",null,"《Redis 开发与运维》",-1),js=s("li",null,"《Redis 设计与实现》",-1),Cs={href:"https://redis.io/docs/manual/transactions/",target:"_blank",rel:"noopener noreferrer"},ws={href:"https://buildatscale.tech/what-is-redis-pipeline/",target:"_blank",rel:"noopener noreferrer"},Ls={href:"https://mp.weixin.qq.com/s/FPYE1B839_8Yk1-YSiW-1Q",target:"_blank",rel:"noopener noreferrer"},Gs={href:"https://mp.weixin.qq.com/s/Sej7D9TpdAobcCmdYdMIyA",target:"_blank",rel:"noopener noreferrer"},Ns={href:"https://mp.weixin.qq.com/s/mIc6a9mfEGdaNDD3MmfFsg",target:"_blank",rel:"noopener noreferrer"};function As(Ks,Is){const a=t("ExternalLinkIcon"),l=t("RouteLink");return p(),d("div",null,[u,s("p",null,[s("a",h,[g,n(a)]),e(" 命令后可以输入多个命令，Redis 不会立即执行这些命令，而是将它们放到队列，当调用了 "),s("a",m,[k,n(a)]),e(" 命令后，再执行所有的命令。")]),b,v,s("p",null,[e("你也可以通过 "),s("a",y,[R,n(a)]),e(" 命令取消一个事务，它会清空事务队列中保存的所有命令。")]),f,s("p",null,[e("你可以通过"),s("a",_,[E,n(a)]),e(" 命令监听指定的 Key，当调用 "),x,e(" 命令执行事务时，如果一个被 "),S,e(" 命令监视的 Key 被 "),T,e(" 修改的话，整个事务都不会被执行。")]),O,s("p",null,[e("不过，如果 "),q,e(" 与 "),j,e(" 在同一个 Session 里，并且被 "),C,e(" 监视的 Key 被修改的操作发生在事务内部，这个事务是可以被执行成功的（相关 issue："),s("a",w,[e("WATCH 命令碰到 MULTI 命令时的不同效果"),n(a)]),e("）。")]),L,s("p",null,[e("Redis 官网相关介绍 "),s("a",G,[e("https://redis.io/topics/transactions"),n(a)]),e(" 如下：")]),N,s("ul",null,[s("li",null,[s("a",A,[e("issue#452: 关于 Redis 事务不满足原子性的问题"),n(a)]),e(" 。")]),s("li",null,[s("a",K,[e("Issue#491:关于 Redis 没有事务回滚？"),n(a)])])]),I,s("p",null,[e("另外，Redis 7.0 新增了 "),s("a",M,[e("Redis functions"),n(a)]),e(" 特性，你可以将 Redis functions 看作是比 Lua 更强大的脚本。")]),D,U,s("ul",null,[s("li",null,[s("a",J,[e("你的 Redis 真的变慢了吗？性能优化如何做 - 阿里开发者"),n(a)])]),s("li",null,[s("a",B,[e("Redis 常见阻塞原因总结 - JavaGuide"),n(a)])])]),P,s("p",null,[e("另外，除了能减少 RTT 之外，发送一次命令的 socket I/O 成本也比较高（涉及上下文切换，存在"),F,e("和"),H,e("系统调用），批量操作还可以减少 socket I/O 成本。这个在官方对 pipeline 的介绍中有提到："),s("a",z,[e("https://redis.io/docs/manual/pipelining/"),n(a)]),e(" 。")]),W,s("blockquote",null,[Y,s("p",null,[e("我在 "),s("a",Q,[e("Redis 集群详解（付费）"),n(a)]),e(" 这篇文章中详细介绍了 Redis Cluster 这部分的内容，感兴趣地可以看看。")])]),V,s("p",null,[e("在 "),n(l,{to:"/database/redis/redis-common-blocking-problems-summary.html"},{default:r(()=>[e("Redis 常见阻塞原因总结")]),_:1}),e("这篇文章中我们提到：大 key 还会造成阻塞问题。具体来说，主要体现在下面三个方面：")]),X,s("ul",null,[s("li",null,[s("a",Z,[e("redis-rdb-tools"),n(a)]),e("：Python 语言写的用来分析 Redis 的 RDB 快照文件用的工具")]),s("li",null,[s("a",$,[e("rdb_bigkeys"),n(a)]),e(" : Go 语言写的用来分析 Redis 的 RDB 快照文件用的工具，性能更好。")])]),ss,es,s("p",null,[e("这里以阿里云 Redis 为例说明，它支持 bigkey 实时分析、发现，文档地址："),s("a",ns,[e("https://www.alibabacloud.com/help/zh/apsaradb-for-redis/latest/use-the-real-time-key-statistics-feature"),n(a)]),e(" 。")]),as,s("p",null,[e("京东零售的 "),s("a",is,[e("hotkey"),n(a)]),e(" 这个项目不光支持 hotkey 的发现，还支持 hotkey 的处理。")]),ts,ls,os,ps,ds,rs,cs,s("p",null,[e("这里以阿里云 Redis 为例说明，它支持 hotkey 实时分析、发现，文档地址："),s("a",us,[e("https://www.alibabacloud.com/help/zh/apsaradb-for-redis/latest/use-the-real-time-key-statistics-feature"),n(a)]),e(" 。")]),hs,s("p",null,[gs,e("："),s("a",ms,[e("Redis 内存碎片详解"),n(a)]),e("。")]),ks,s("p",null,[e("更多关于布隆过滤器的详细介绍可以看看我的这篇原创："),s("a",bs,[e("不了解布隆过滤器？一文给你整的明明白白！"),n(a)]),e(" ，强烈推荐。")]),vs,s("p",null,[e("相关文章推荐："),s("a",ys,[e("缓存和数据库一致性问题，看这篇就够了 - 水滴与银弹"),n(a)]),e("。")]),Rs,s("p",null,[e("单独抽了一篇文章来总结可能会导致 Redis 阻塞的情况："),s("a",fs,[e("Redis 常见阻塞原因总结"),n(a)]),e("。")]),_s,s("p",null,[Es,e("："),s("a",xs,[e("Redis 集群详解（付费）"),n(a)]),e("。")]),Ss,s("p",null,[e("相关文章推荐："),s("a",Ts,[e("阿里云 Redis 开发规范"),n(a)]),e(" 。")]),Os,s("ul",null,[qs,js,s("li",null,[e("Redis Transactions : "),s("a",Cs,[e("https://redis.io/docs/manual/transactions/"),n(a)])]),s("li",null,[e("What is Redis Pipeline："),s("a",ws,[e("https://buildatscale.tech/what-is-redis-pipeline/"),n(a)])]),s("li",null,[e("一文详解 Redis 中 BigKey、HotKey 的发现与处理："),s("a",Ls,[e("https://mp.weixin.qq.com/s/FPYE1B839_8Yk1-YSiW-1Q"),n(a)])]),s("li",null,[e("Bigkey 问题的解决思路与方式探索:"),s("a",Gs,[e("https://mp.weixin.qq.com/s/Sej7D9TpdAobcCmdYdMIyA"),n(a)])]),s("li",null,[e("Redis 延迟问题全面排障指南："),s("a",Ns,[e("https://mp.weixin.qq.com/s/mIc6a9mfEGdaNDD3MmfFsg"),n(a)])])])])}const Us=o(c,[["render",As],["__file","redis-questions-02.html.vue"]]),Js=JSON.parse('{"path":"/database/redis/redis-questions-02.html","title":"Redis常见面试题总结(下)","lang":"zh-CN","frontmatter":{"title":"Redis常见面试题总结(下)","category":"数据库","tag":["Redis"],"head":[["meta",{"name":"keywords","content":"Redis基础,Redis常见数据结构,Redis线程模型,Redis内存管理,Redis事务,Redis性能优化"}],["meta",{"name":"description","content":"一篇文章总结Redis常见的知识点和面试题，涵盖Redis基础、Redis常见数据结构、Redis线程模型、Redis内存管理、Redis事务、Redis性能优化等内容。"}],["meta",{"property":"og:url","content":"https://snailcoding.cn/database/redis/redis-questions-02.html"}],["meta",{"property":"og:site_name","content":"蜗牛のJava宝典"}],["meta",{"property":"og:title","content":"Redis常见面试题总结(下)"}],["meta",{"property":"og:description","content":"Redis 事务 什么是 Redis 事务？ 你可以将 Redis 中的事务理解为：Redis 事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。 Redis 事务实际开发中使用的非常少，功能比较鸡肋，不要将其和我们平时理解的关系型数据库的事务混淆了。 除了不满足原子性和持久性之外，事务中的每条命令都会与 R..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/database/redis/redis-transactions.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Redis常见面试题总结(下)"}],["meta",{"property":"article:author","content":"Mr.Xu"}],["meta",{"property":"article:tag","content":"Redis"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis常见面试题总结(下)\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-transactions.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-rollback.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-pipeline-vs-transaction.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/bigkey-criterion.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/aliyun-key-analysis.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/jd-hotkey.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/aliyun-key-analysis.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/aliyun-hotkey-proxy-query-cache.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-cache-penetration.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-simple-schematic-diagram.png\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/algorithms/bloom-filter-bit-table.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-cache-penetration-bloom-filter.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-cache-breakdown.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-cache-avalanche.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Xu\\",\\"url\\":\\"https://snailcoding.cn\\"}]}"]],"description":"Redis 事务 什么是 Redis 事务？ 你可以将 Redis 中的事务理解为：Redis 事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。 Redis 事务实际开发中使用的非常少，功能比较鸡肋，不要将其和我们平时理解的关系型数据库的事务混淆了。 除了不满足原子性和持久性之外，事务中的每条命令都会与 R..."},"headers":[{"level":2,"title":"Redis 事务","slug":"redis-事务","link":"#redis-事务","children":[{"level":3,"title":"什么是 Redis 事务？","slug":"什么是-redis-事务","link":"#什么是-redis-事务","children":[]},{"level":3,"title":"如何使用 Redis 事务？","slug":"如何使用-redis-事务","link":"#如何使用-redis-事务","children":[]},{"level":3,"title":"Redis 事务支持原子性吗？","slug":"redis-事务支持原子性吗","link":"#redis-事务支持原子性吗","children":[]},{"level":3,"title":"Redis 事务支持持久性吗？","slug":"redis-事务支持持久性吗","link":"#redis-事务支持持久性吗","children":[]},{"level":3,"title":"如何解决 Redis 事务的缺陷？","slug":"如何解决-redis-事务的缺陷","link":"#如何解决-redis-事务的缺陷","children":[]}]},{"level":2,"title":"Redis 性能优化（重要）","slug":"redis-性能优化-重要","link":"#redis-性能优化-重要","children":[{"level":3,"title":"使用批量操作减少网络传输","slug":"使用批量操作减少网络传输","link":"#使用批量操作减少网络传输","children":[]},{"level":3,"title":"大量 key 集中过期问题","slug":"大量-key-集中过期问题","link":"#大量-key-集中过期问题","children":[]},{"level":3,"title":"Redis bigkey（大 Key）","slug":"redis-bigkey-大-key","link":"#redis-bigkey-大-key","children":[]},{"level":3,"title":"Redis hotkey（热 Key）","slug":"redis-hotkey-热-key","link":"#redis-hotkey-热-key","children":[]},{"level":3,"title":"慢查询命令","slug":"慢查询命令","link":"#慢查询命令","children":[]},{"level":3,"title":"Redis 内存碎片","slug":"redis-内存碎片","link":"#redis-内存碎片","children":[]}]},{"level":2,"title":"Redis 生产问题（重要）","slug":"redis-生产问题-重要","link":"#redis-生产问题-重要","children":[{"level":3,"title":"缓存穿透","slug":"缓存穿透","link":"#缓存穿透","children":[]},{"level":3,"title":"缓存击穿","slug":"缓存击穿","link":"#缓存击穿","children":[]},{"level":3,"title":"缓存雪崩","slug":"缓存雪崩","link":"#缓存雪崩","children":[]},{"level":3,"title":"如何保证缓存和数据库数据的一致性？","slug":"如何保证缓存和数据库数据的一致性","link":"#如何保证缓存和数据库数据的一致性","children":[]},{"level":3,"title":"哪些情况可能会导致 Redis 阻塞？","slug":"哪些情况可能会导致-redis-阻塞","link":"#哪些情况可能会导致-redis-阻塞","children":[]}]},{"level":2,"title":"Redis 集群","slug":"redis-集群","link":"#redis-集群","children":[]},{"level":2,"title":"Redis 使用规范","slug":"redis-使用规范","link":"#redis-使用规范","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":35.73,"words":10720},"filePathRelative":"database/redis/redis-questions-02.md","excerpt":"<h2>Redis 事务</h2>\\n<h3>什么是 Redis 事务？</h3>\\n<p>你可以将 Redis 中的事务理解为：<strong>Redis 事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。</strong></p>\\n<p>Redis 事务实际开发中使用的非常少，功能比较鸡肋，不要将其和我们平时理解的关系型数据库的事务混淆了。</p>\\n<p>除了不满足原子性和持久性之外，事务中的每条命令都会与 Redis 服务器进行网络交互，这是比较浪费资源的行为。明明一次批量执行多个命令就可以了，这种操作实在是看不懂。</p>\\n<p>因此，Redis 事务是不建议在日常开发中使用的。</p>","autoDesc":true}');export{Us as comp,Js as data};
