import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,e as s}from"./app-Cg1ooxyK.js";const n={},i=s(`<h1 id="stream流的使用" tabindex="-1"><a class="header-anchor" href="#stream流的使用"><span>stream流的使用</span></a></h1><h2 id="对map集合的操作" tabindex="-1"><a class="header-anchor" href="#对map集合的操作"><span>对map集合的操作</span></a></h2><ul><li><p>map集合value总和</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>long sum = datas.entrySet().stream().filter(entry -&gt; !entry.getKey().equals(&quot;1&quot;) &amp;&amp; !entry.getKey().equals(&quot;3&quot;)
                        &amp;&amp; !entry.getKey().equals(&quot;6&quot;) &amp;&amp; !entry.getKey().equals(&quot;7&quot;) &amp;&amp; !entry.getKey().equals(&quot;8&quot;)
                        &amp;&amp; !entry.getKey().equals(&quot;10&quot;))
                        .mapToLong(entry -&gt; Long.parseLong(entry.getValue())).sum();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>合并两个map,key相同的value进行加和</p></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>map1.forEach((key, value) -&gt; map2.merge(key, value, Integer::sum));//map1合并到map2,map类型&lt;String,Integer&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="对list集合的操作" tabindex="-1"><a class="header-anchor" href="#对list集合的操作"><span>对list集合的操作</span></a></h2><ul><li><p>根据时间对list集合的对象进行升序排序</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThirdCloudAlarmDto</span><span class="token punctuation">&gt;</span></span> dtoList <span class="token operator">=</span> collect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">ThirdCloudAlarmDto</span><span class="token operator">::</span><span class="token function">getOccurTime</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>stream流根据时间筛选所需数据</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>List&lt;CameraAlarmDto&gt; collect = cameraAlarms.stream().
                        filter(e -&gt; (e.getTimeLast().after(startDate) &amp;&amp;
                                e.getTimeLast().before(endDate))).collect(Collectors.toList());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对list集合根据某一个元素进行过滤，并选取过滤后的集合对象中的某些属性组合成新的集合</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code> groups.forEach(group -&gt; {
            List&lt;DceEquipGroupInfoVo&gt; dceEquipGroupInfoVos = dceEquipInfoDtos.stream().
                    filter((DceEquipGroupInfoDto d) -&gt; group.getNodeName().equals(d.getNodeName())).
                    map(item -&gt; {
                        DceEquipGroupInfoVo equipGroupInfoVo = new DceEquipGroupInfoVo();
                        equipGroupInfoVo.setEquipKey(item.getEquipKey()).setEquipName(item.getEquipName());
                        return equipGroupInfoVo;
                    }).distinct().collect(Collectors.toList());
      }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对List集合使用分页查询</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>thirdCloudHostDtos = thirdCloudHostDtos.stream().skip((pageNum - 1) * pageSize)
                    .limit(pageSize).collect(Collectors.toList());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对list集合中对象中属性为字符串数字比较倒叙排序</p></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code> List&lt;MetricVO&gt; listTop5 = list.stream().sorted(Comparator.comparing(MetricVO::getValue,
                Comparator.comparingInt(Integer::parseInt)).reversed()).limit(5).collect(Collectors.toList());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>使用stream流进行模糊查询</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>keyWordsList = dtoList.stream().filter(e -&gt; Boolean.FALSE ? e.getServerIp().equals(keyWords)
                     || e.getServerPort().equals(keyWords) || e.getClientIp().equals(keyWords)
                     || e.getClientPort().equals(keyWords) || e.getAppProgram().equals(keyWords)
                     || e.getProtocol().equals(keyWords) :
                     (e.getServerIp().contains(keyWords)) || e.getServerPort().contains(keyWords) || e.getClientIp().contains(keyWords)
                             || e.getClientPort().contains(keyWords) || e.getAppProgram().contains(keyWords)
                             || e.getProtocol().contains(keyWords)).collect(Collectors.toList());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>取多个list集合的交集</p></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>dealedList = keyWordsList.stream().filter(appList::contains).filter(protocolList::contains).collect(Collectors.toList());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>根据对象某一字段组成类型集合</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>      List&lt;String&gt; appTypes = dtoList.stream().filter(item -&gt;item.getAppProgram() != null)
                             .map(HistoricalFlowDto::getAppProgram).distinct().collect(Collectors.toList());  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>求list属性中某一属性的和</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>
Integer totalOrders = usedStatisticsVoList.stream().mapToInt(ServiceUsedStatisticsVo :: getWorkOrderNum).sum();  //list中存储的是对象

 Long totalOrders = mapList.stream().mapToLong((s) -&gt; Long.valueOf(String.valueOf(s.get(&quot;num&quot;)))).sum();  //list中存储的是map集合
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>根据list中对象的某一属性组合成新的集合</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>List&lt;String&gt; instanceIds = instances.stream().map(ThirdCloudInstance::getInstanceId).collect(Collectors.toList());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>按照list对象中的某一属性进行分组</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Map&lt;String, List&lt;MonitorBusyDegreeResult&gt;&gt; collect = list.stream()
        .collect(Collectors.groupingBy(MonitorBusyDegreeResult::getDataDesc));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>list中存储对象，根据对象某一属性排序</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>List&lt; MetricVO&gt; metricVosBusy  = new ArrayList&lt;&gt;();
businessSystems.stream().sorted(Comparator.comparing(MonitorBusyDegreeResult::getBusyDegree, Comparator.reverseOrder())).collect(Collectors.toList())
        .forEach(e -&gt; {
            metricVosBusy.add(new MetricVO().setKey(e.getDataDesc()).setValue(String.valueOf(e.getBusyDegree())));
        });
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>list中存储map,按map中的某一key对应的value进行排序，取排行</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>     //正序//  
     List&lt;Map&lt;String, Object&gt;&gt; listTop9 = list.stream().sorted(Comparator.comparing(e -&gt; org.apache.commons.collections.MapUtils.getLong(e, &quot;count&quot;))).limit(9).collect(Collectors.toList());
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>//逆序<br> List&lt;Map&lt;String, Object&gt;&gt; listTop9 = list.stream().sorted((c1, c2) -&gt; org.apache.commons.collections.MapUtils.getDouble(c2, &quot;count&quot;)       .compareTo(org.apache.commons.collections.MapUtils.getDouble(c1, &quot;count&quot;))).limit(9).collect(Collectors.toList());</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>    1、stream流中不要对变量进行操作，如果你需要对变量进行操作，则最好不要用stream流，避免在stream流中对变量进行操作
    2、遍历的时候需要通过条件判断跳出本次循环的时候可以使用return等同于for循环中的continue，如果有需要直接结束循环的操作就不建议使用stream流进行遍历了
    3、使用parallelStream并行流的时候，要注意线程安全问题，建议能不用并行流的时候就不要用并行流。  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),l=[i];function r(o,d){return t(),a("div",null,l)}const p=e(n,[["render",r],["__file","stream流的使用.html.vue"]]),m=JSON.parse('{"path":"/java-essentials/stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"stream流的使用","lang":"zh-CN","frontmatter":{"description":"stream流的使用 对map集合的操作 map集合value总和 合并两个map,key相同的value进行加和 对list集合的操作 根据时间对list集合的对象进行升序排序 stream流根据时间筛选所需数据 对list集合根据某一个元素进行过滤，并选取过滤后的集合对象中的某些属性组合成新的集合 对List集合使用分页查询 对list集合中对象中...","head":[["meta",{"property":"og:url","content":"https://snailcoding.cn/java-essentials/stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"蜗牛のJava宝典"}],["meta",{"property":"og:title","content":"stream流的使用"}],["meta",{"property":"og:description","content":"stream流的使用 对map集合的操作 map集合value总和 合并两个map,key相同的value进行加和 对list集合的操作 根据时间对list集合的对象进行升序排序 stream流根据时间筛选所需数据 对list集合根据某一个元素进行过滤，并选取过滤后的集合对象中的某些属性组合成新的集合 对List集合使用分页查询 对list集合中对象中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Xu"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"stream流的使用\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Xu\\",\\"url\\":\\"https://snailcoding.cn\\"}]}"]]},"headers":[{"level":2,"title":"对map集合的操作","slug":"对map集合的操作","link":"#对map集合的操作","children":[]},{"level":2,"title":"对list集合的操作","slug":"对list集合的操作","link":"#对list集合的操作","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.39,"words":718},"filePathRelative":"java-essentials/stream流的使用.md","excerpt":"\\n<h2>对map集合的操作</h2>\\n<ul>\\n<li>\\n<p>map集合value总和</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>long sum = datas.entrySet().stream().filter(entry -&gt; !entry.getKey().equals(\\"1\\") &amp;&amp; !entry.getKey().equals(\\"3\\")\\n                        &amp;&amp; !entry.getKey().equals(\\"6\\") &amp;&amp; !entry.getKey().equals(\\"7\\") &amp;&amp; !entry.getKey().equals(\\"8\\")\\n                        &amp;&amp; !entry.getKey().equals(\\"10\\"))\\n                        .mapToLong(entry -&gt; Long.parseLong(entry.getValue())).sum();\\n</code></pre></div></li>\\n<li>\\n<p>合并两个map,key相同的value进行加和</p>\\n</li>\\n</ul>","autoDesc":true}');export{p as comp,m as data};
