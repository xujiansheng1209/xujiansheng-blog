import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,o as r,c,a as e,d as s,b as n,w as d,e as i}from"./app-Cg1ooxyK.js";const p="/assets/why-redis-so-fast-TbWX24ja.png",u={},h=e("h2",{id:"redis-基础",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#redis-基础"},[e("span",null,"Redis 基础")])],-1),g=e("h3",{id:"什么是-redis",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是-redis"},[e("span",null,"什么是 Redis？")])],-1),k={href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"},m=e("strong",null,"RE",-1),b=e("strong",null,"DI",-1),v=e("strong",null,"S",-1),R=e("p",null,"为了满足不同的业务场景，Redis 内置了多种数据类型实现（比如 String、Hash、Sorted Set、Bitmap、HyperLogLog、GEO）。并且，Redis 还支持事务、持久化、Lua 脚本、多种开箱即用的集群方案（Redis Sentinel、Redis Cluster）。",-1),_=e("figure",null,[e("img",{src:"https://oss.javaguide.cn/github/javaguide/database/redis/redis-overview-of-data-types-2023-09-28.jpg",alt:"Redis 数据类型概览",tabindex:"0"}),e("figcaption",null,"Redis 数据类型概览")],-1),f=e("p",null,"Redis 没有外部依赖，Linux 和 OS X 是 Redis 开发和测试最多的两个操作系统，官方推荐生产环境使用 Linux 部署 Redis。",-1),y={href:"https://try.redis.io/",target:"_blank",rel:"noopener noreferrer"},S=e("figure",null,[e("img",{src:"https://oss.javaguide.cn/github/javaguide/database/redis/try.redis.io.png",alt:"try-redis",tabindex:"0"}),e("figcaption",null,"try-redis")],-1),x={href:"https://techstacks.io/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://techstacks.io/tech/redis",target:"_blank",rel:"noopener noreferrer"},O=e("h3",{id:"redis-为什么这么快",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#redis-为什么这么快"},[e("span",null,"Redis 为什么这么快？")])],-1),j=e("p",null,"Redis 内部做了非常多的性能优化，比较重要的有下面 3 点：",-1),L=e("ol",null,[e("li",null,"Redis 基于内存，内存的访问速度是磁盘的上千倍；"),e("li",null,"Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和 IO 多路复用（Redis 线程模式后面会详细介绍到）；"),e("li",null,"Redis 内置了多种优化过后的数据类型/结构实现，性能非常高。")],-1),D={href:"https://twitter.com/alexxubyte/status/1498703822528544770",target:"_blank",rel:"noopener noreferrer"},I=i('<figure><img src="'+p+'" alt="why-redis-so-fast" tabindex="0"><figcaption>why-redis-so-fast</figcaption></figure><h3 id="分布式缓存常见的技术选型方案有哪些" tabindex="-1"><a class="header-anchor" href="#分布式缓存常见的技术选型方案有哪些"><span>分布式缓存常见的技术选型方案有哪些？</span></a></h3><p>分布式缓存的话，比较老牌同时也是使用的比较多的还是 <strong>Memcached</strong> 和 <strong>Redis</strong>。不过，现在基本没有看过还有项目使用 <strong>Memcached</strong> 来做缓存，都是直接用 <strong>Redis</strong>。</p><p>Memcached 是分布式缓存最开始兴起的那会，比较常用的。后来，随着 Redis 的发展，大家慢慢都转而使用更加强大的 Redis 了。</p>',4),P={href:"https://github.com/Tencent/Tendis",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/facebook/rocksdb",target:"_blank",rel:"noopener noreferrer"},B={href:"https://mp.weixin.qq.com/s/MeYkfOIdnU6LYlsGb24KjQ",target:"_blank",rel:"noopener noreferrer"},T=e("p",null,"不过，从 Tendis 这个项目的 Github 提交记录可以看出，Tendis 开源版几乎已经没有被维护更新了，加上其关注度并不高，使用的公司也比较少。因此，不建议你使用 Tendis 来实现分布式缓存。",-1),N=e("p",null,"目前，比较业界认可的 Redis 替代品还是下面这两个开源分布式缓存（都是通过碰瓷 Redis 火的）：",-1),C={href:"https://github.com/dragonflydb/dragonfly",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/Snapchat/KeyDB",target:"_blank",rel:"noopener noreferrer"},H=i('<p>不过，个人还是建议分布式缓存首选 Redis ，毕竟经过这么多年的生考验，生态也这么优秀，资料也很全面。</p><h3 id="说一下-redis-和-memcached-的区别和共同点" tabindex="-1"><a class="header-anchor" href="#说一下-redis-和-memcached-的区别和共同点"><span>说一下 Redis 和 Memcached 的区别和共同点</span></a></h3><p>现在公司一般都是用 Redis 来实现缓存，而且 Redis 自身也越来越强大了！不过，了解 Redis 和 Memcached 的区别和共同点，有助于我们在做相应的技术选型的时候，能够做到有理有据！</p><p><strong>共同点</strong>：</p><ol><li>都是基于内存的数据库，一般都用来当做缓存使用。</li><li>都有过期策略。</li><li>两者的性能都非常高。</li></ol><p><strong>区别</strong>：</p><ol><li><strong>Redis 支持更丰富的数据类型（支持更复杂的应用场景）</strong>。Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。Memcached 只支持最简单的 k/v 数据类型。</li><li><strong>Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而 Memcached 把数据全部存在内存之中。</strong></li><li><strong>Redis 有灾难恢复机制。</strong> 因为可以把缓存中的数据持久化到磁盘上。</li><li><strong>Redis 在服务器内存使用完之后，可以将不用的数据放到磁盘上。但是，Memcached 在服务器内存使用完之后，就会直接报异常。</strong></li><li><strong>Memcached 没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 Redis 目前是原生支持 cluster 模式的。</strong></li><li><strong>Memcached 是多线程，非阻塞 IO 复用的网络模型；Redis 使用单线程的多路 IO 复用模型。</strong> （Redis 6.0 针对网络数据的读写引入了多线程）</li><li><strong>Redis 支持发布订阅模型、Lua 脚本、事务等功能，而 Memcached 不支持。并且，Redis 支持更多的编程语言。</strong></li><li><strong>Memcached 过期数据的删除策略只用了惰性删除，而 Redis 同时使用了惰性删除与定期删除。</strong></li></ol><p>相信看了上面的对比之后，我们已经没有什么理由可以选择使用 Memcached 来作为自己项目的分布式缓存了。</p><h3 id="为什么要用-redis-为什么要用缓存" tabindex="-1"><a class="header-anchor" href="#为什么要用-redis-为什么要用缓存"><span>为什么要用 Redis/为什么要用缓存？</span></a></h3><p>下面我们主要从“高性能”和“高并发”这两点来回答这个问题。</p><p><strong>1、高性能</strong></p><p>假如用户第一次访问数据库中的某些数据的话，这个过程是比较慢，毕竟是从硬盘中读取的。但是，如果说，用户访问的数据属于高频数据并且不会经常改变的话，那么我们就可以很放心地将该用户访问的数据存在缓存中。</p><p><strong>这样有什么好处呢？</strong> 那就是保证用户下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。</p><p><strong>2、高并发</strong></p><p>一般像 MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 10w+，甚至最高能达到 30w+（就单机 Redis 的情况，Redis 集群的话会更高）。</p><blockquote><p>QPS（Query Per Second）：服务器每秒可以执行的查询次数；</p></blockquote><p>由此可见，直接操作缓存能够承受的数据库请求数量是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。进而，我们也就提高了系统整体的并发。</p><h3 id="常见的缓存读写策略有哪些" tabindex="-1"><a class="header-anchor" href="#常见的缓存读写策略有哪些"><span>常见的缓存读写策略有哪些？</span></a></h3>',18),U={href:"https://javaguide.cn/database/redis/3-commonly-used-cache-read-and-write-strategies.html",target:"_blank",rel:"noopener noreferrer"},M=e("h3",{id:"什么是-redis-module-有什么用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是-redis-module-有什么用"},[e("span",null,"什么是 Redis Module？有什么用？")])],-1),X=e("p",null,"Redis 从 4.0 版本开始，支持通过 Module 来扩展其功能以满足特殊的需求。这些 Module 以动态链接库（so 文件）的形式被加载到 Redis 中，这是一种非常灵活的动态扩展功能的实现方式，值得借鉴学习！",-1),q=e("p",null,"我们每个人都可以基于 Redis 去定制化开发自己的 Module，比如实现搜索引擎功能、自定义分布式锁和分布式限流。",-1),F=e("p",null,"目前，被 Redis 官方推荐的 Module 有：",-1),G={href:"https://github.com/RediSearch/RediSearch",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/RedisJSON/RedisJSON",target:"_blank",rel:"noopener noreferrer"},K={href:"https://github.com/RedisGraph/RedisGraph",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/RedisTimeSeries/RedisTimeSeries",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/RedisBloom/RedisBloom",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://github.com/RedisAI/RedisAI",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/brandur/redis-cell",target:"_blank",rel:"noopener noreferrer"},Z=e("li",null,"……",-1),W={href:"https://redis.io/modules",target:"_blank",rel:"noopener noreferrer"},$=e("h2",{id:"redis-应用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#redis-应用"},[e("span",null,"Redis 应用")])],-1),ee=e("h3",{id:"redis-除了做缓存-还能做什么",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#redis-除了做缓存-还能做什么"},[e("span",null,"Redis 除了做缓存，还能做什么？")])],-1),se=e("strong",null,"分布式锁",-1),ne={href:"https://javaguide.cn/distributed-system/distributed-lock.html",target:"_blank",rel:"noopener noreferrer"},ae=i("<li><strong>限流</strong>：一般是通过 Redis + Lua 脚本的方式来实现限流。如果不想自己写 Lua 脚本的话，也可以直接利用 Redisson 中的 <code>RRateLimiter</code> 来实现分布式限流，其底层实现就是基于 Lua 代码+令牌桶算法。</li><li><strong>消息队列</strong>：Redis 自带的 List 数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 Stream 类型的数据结构更加适合用来做消息队列。它比较类似于 Kafka，有主题和消费组的概念，支持消息持久化以及 ACK 机制。</li><li><strong>延时队列</strong>：Redisson 内置了延时队列（基于 Sorted Set 实现的）。</li><li><strong>分布式 Session</strong> ：利用 String 或者 Hash 数据类型保存 Session 数据，所有的服务器都可以访问。</li><li><strong>复杂业务场景</strong>：通过 Redis 以及 Redis 扩展（比如 Redisson）提供的数据结构，我们可以很方便地完成很多复杂的业务场景比如通过 Bitmap 统计活跃用户、通过 Sorted Set 维护排行榜。</li><li>……</li>",6),ie=e("h3",{id:"如何基于-redis-实现分布式锁",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#如何基于-redis-实现分布式锁"},[e("span",null,"如何基于 Redis 实现分布式锁？")])],-1),te={href:"https://javaguide.cn/distributed-system/distributed-lock-implementations.html",target:"_blank",rel:"noopener noreferrer"},le=i(`<h3 id="redis-可以做消息队列么" tabindex="-1"><a class="header-anchor" href="#redis-可以做消息队列么"><span>Redis 可以做消息队列么？</span></a></h3><blockquote><p>实际项目中使用 Redis 来做消息队列的非常少，毕竟有更成熟的消息队列中间件可以用。</p></blockquote><p>先说结论：<strong>可以是可以，但不建议使用 Redis 来做消息队列。和专业的消息队列相比，还是有很多欠缺的地方。</strong></p><p><strong>Redis 2.0 之前，如果想要使用 Redis 来做消息队列的话，只能通过 List 来实现。</strong></p><p>通过 <code>RPUSH/LPOP</code> 或者 <code>LPUSH/RPOP</code>即可实现简易版消息队列：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 生产者生产消息</span>
<span class="token operator">&gt;</span> RPUSH myList msg1 msg2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
<span class="token operator">&gt;</span> RPUSH myList msg3
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token comment"># 消费者消费消息</span>
<span class="token operator">&gt;</span> LPOP myList
<span class="token string">&quot;msg1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，通过 <code>RPUSH/LPOP</code> 或者 <code>LPUSH/RPOP</code>这样的方式存在性能问题，我们需要不断轮询去调用 <code>RPOP</code> 或 <code>LPOP</code> 来消费消息。当 List 为空时，大部分的轮询的请求都是无效请求，这种方式大量浪费了系统资源。</p><p>因此，Redis 还提供了 <code>BLPOP</code>、<code>BRPOP</code> 这种阻塞式读取的命令（带 B-Blocking 的都是阻塞式），并且还支持一个超时参数。如果 List 为空，Redis 服务端不会立刻返回结果，它会等待 List 中有新数据后再返回或者是等待最多一个超时时间后返回空。如果将超时时间设置为 0 时，即可无限等待，直到弹出消息</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 超时时间为 10s</span>
<span class="token comment"># 如果有数据立刻返回，否则最多等待10秒</span>
<span class="token operator">&gt;</span> BRPOP myList <span class="token number">10</span>
null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>List 实现消息队列功能太简单，像消息确认机制等功能还需要我们自己实现，最要命的是没有广播机制，消息也只能被消费一次。</strong></p><p><strong>Redis 2.0 引入了发布订阅 (pub/sub) 功能，解决了 List 实现消息队列没有广播机制的问题。</strong></p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-pub-sub.png" alt="Redis 发布订阅 (pub/sub) 功能" tabindex="0"><figcaption>Redis 发布订阅 (pub/sub) 功能</figcaption></figure><p>pub/sub 中引入了一个概念叫 <strong>channel（频道）</strong>，发布订阅机制的实现就是基于这个 channel 来做的。</p><p>pub/sub 涉及发布者（Publisher）和订阅者（Subscriber，也叫消费者）两个角色：</p><ul><li>发布者通过 <code>PUBLISH</code> 投递消息给指定 channel。</li><li>订阅者通过<code>SUBSCRIBE</code>订阅它关心的 channel。并且，订阅者可以订阅一个或者多个 channel。</li></ul><p>我们这里启动 3 个 Redis 客户端来简单演示一下：</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-pubsub-message-queue.png" alt="pub/sub 实现消息队列演示" tabindex="0"><figcaption>pub/sub 实现消息队列演示</figcaption></figure><p>pub/sub 既能单播又能广播，还支持 channel 的简单正则匹配。不过，消息丢失（客户端断开连接或者 Redis 宕机都会导致消息丢失）、消息堆积（发布者发布消息的时候不会管消费者的具体消费能力如何）等问题依然没有一个比较好的解决办法。</p><p>为此，Redis 5.0 新增加的一个数据结构 <code>Stream</code> 来做消息队列。<code>Stream</code> 支持：</p><ul><li>发布 / 订阅模式</li><li>按照消费者组进行消费（借鉴了 Kafka 消费者组的概念）</li><li>消息持久化（ RDB 和 AOF）</li><li>ACK 机制（通过确认机制来告知已经成功处理了消息）</li><li>阻塞式获取消息</li></ul><p><code>Stream</code> 的结构如下：</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-stream-structure.png" alt="" tabindex="0"><figcaption></figcaption></figure><p>这是一个有序的消息链表，每个消息都有一个唯一的 ID 和对应的内容。ID 是一个时间戳和序列号的组合，用来保证消息的唯一性和递增性。内容是一个或多个键值对（类似 Hash 基本数据类型），用来存储消息的数据。</p><p>这里再对图中涉及到的一些概念，进行简单解释：</p><ul><li><code>Consumer Group</code>：消费者组用于组织和管理多个消费者。消费者组本身不处理消息，而是再将消息分发给消费者，由消费者进行真正的消费</li><li><code>last_delivered_id</code>：标识消费者组当前消费位置的游标，消费者组中任意一个消费者读取了消息都会使 last_delivered_id 往前移动。</li><li><code>pending_ids</code>：记录已经被客户端消费但没有 ack 的消息的 ID。</li></ul><p>下面是<code>Stream</code> 用作消息队列时常用的命令：</p><ul><li><code>XADD</code>：向流中添加新的消息。</li><li><code>XREAD</code>：从流中读取消息。</li><li><code>XREADGROUP</code>：从消费组中读取消息。</li><li><code>XRANGE</code>：根据消息 ID 范围读取流中的消息。</li><li><code>XREVRANGE</code>：与 <code>XRANGE</code> 类似，但以相反顺序返回结果。</li><li><code>XDEL</code>：从流中删除消息。</li><li><code>XTRIM</code>：修剪流的长度，可以指定修建策略（<code>MAXLEN</code>/<code>MINID</code>）。</li><li><code>XLEN</code>：获取流的长度。</li><li><code>XGROUP CREATE</code>：创建消费者组。</li><li><code>XGROUP DESTROY</code> ： 删除消费者组</li><li><code>XGROUP DELCONSUMER</code>：从消费者组中删除一个消费者。</li><li><code>XGROUP SETID</code>：为消费者组设置新的最后递送消息 ID</li><li><code>XACK</code>：确认消费组中的消息已被处理。</li><li><code>XPENDING</code>：查询消费组中挂起（未确认）的消息。</li><li><code>XCLAIM</code>：将挂起的消息从一个消费者转移到另一个消费者。</li><li><code>XINFO</code>：获取流(<code>XINFO STREAM</code>)、消费组(<code>XINFO GROUPS</code>)或消费者(<code>XINFO CONSUMERS</code>)的详细信息。</li></ul><p><code>Stream</code> 使用起来相对要麻烦一些，这里就不演示了。</p><p>总的来说，<code>Stream</code> 已经可以满足一个消息队列的基本要求了。不过，<code>Stream</code> 在实际使用中依然会有一些小问题不太好解决比如在 Redis 发生故障恢复后不能保证消息至少被消费一次。</p><p>综上，和专业的消息队列相比，使用 Redis 来实现消息队列还是有很多欠缺的地方比如消息丢失和堆积问题不好解决。因此，我们通常建议不要使用 Redis 来做消息队列，你完全可以选择市面上比较成熟的一些消息队列比如 RocketMQ、Kafka。不过，如果你就是想要用 Redis 来做消息队列的话，那我建议你优先考虑 <code>Stream</code>，这是目前相对最优的 Redis 消息队列实现。</p>`,30),de={href:"https://mp.weixin.qq.com/s/gCUT5TcCQRAxYkTJfTRjJw",target:"_blank",rel:"noopener noreferrer"},oe=i('<h3 id="redis-可以做搜索引擎么" tabindex="-1"><a class="header-anchor" href="#redis-可以做搜索引擎么"><span>Redis 可以做搜索引擎么？</span></a></h3><p>Redis 是可以实现全文搜索引擎功能的，需要借助 <strong>RediSearch</strong> ，这是一个基于 Redis 的搜索引擎模块。</p><p>RediSearch 支持中文分词、聚合统计、停用词、同义词、拼写检查、标签查询、向量相似度查询、多关键词搜索、分页搜索等功能，算是一个功能比较完善的全文搜索引擎了。</p><p>相比较于 Elasticsearch 来说，RediSearch 主要在下面两点上表现更优异一些：</p><ol><li>性能更优秀：依赖 Redis 自身的高性能，基于内存操作（Elasticsearch 基于磁盘）。</li><li>较低内存占用实现快速索引：RediSearch 内部使用压缩的倒排索引，所以可以用较低的内存占用来实现索引的快速构建。</li></ol><p>对于小型项目的简单搜索场景来说，使用 RediSearch 来作为搜索引擎还是没有问题的（搭配 RedisJSON 使用）。</p><p>对于比较复杂或者数据规模较大的搜索场景还是不太建议使用 RediSearch 来作为搜索引擎，主要是因为下面这些限制和问题：</p><ol><li>数据量限制：Elasticsearch 可以支持 PB 级别的数据量，可以轻松扩展到多个节点，利用分片机制提高可用性和性能。RedisSearch 是基于 Redis 实现的，其能存储的数据量受限于 Redis 的内存容量，不太适合存储大规模的数据（内存昂贵，扩展能力较差）。</li><li>分布式能力较差：Elasticsearch 是为分布式环境设计的，可以轻松扩展到多个节点。虽然 RedisSearch 支持分布式部署，但在实际应用中可能会面临一些挑战，如数据分片、节点间通信、数据一致性等问题。</li><li>聚合功能较弱：Elasticsearch 提供了丰富的聚合功能，而 RediSearch 的聚合功能相对较弱，只支持简单的聚合操作。</li><li>生态较差：Elasticsearch 可以轻松和常见的一些系统/软件集成比如 Hadoop、Spark、Kibana，而 RedisSearch 则不具备该优势。</li></ol><p>Elasticsearch 适用于全文搜索、复杂查询、实时数据分析和聚合的场景，而 RediSearch 适用于快速数据存储、缓存和简单查询的场景。</p><h3 id="如何基于-redis-实现延时任务" tabindex="-1"><a class="header-anchor" href="#如何基于-redis-实现延时任务"><span>如何基于 Redis 实现延时任务？</span></a></h3><blockquote><p>类似的问题：</p><ul><li>订单在 10 分钟后未支付就失效，如何用 Redis 实现？</li><li>红包 24 小时未被查收自动退还，如何用 Redis 实现？</li></ul></blockquote><p>基于 Redis 实现延时任务的功能无非就下面两种方案：</p><ol><li>Redis 过期事件监听</li><li>Redisson 内置的延时队列</li></ol><p>Redis 过期事件监听的存在时效性较差、丢消息、多服务实例下消息重复消费等问题，不被推荐使用。</p><p>Redisson 内置的延时队列具备下面这些优势：</p><ol><li><strong>减少了丢消息的可能</strong>：DelayedQueue 中的消息会被持久化，即使 Redis 宕机了，根据持久化机制，也只可能丢失一点消息，影响不大。当然了，你也可以使用扫描数据库的方法作为补偿机制。</li><li><strong>消息不存在重复消费问题</strong>：每个客户端都是从同一个目标队列中获取任务的，不存在重复消费的问题。</li></ol>',16),re=e("h2",{id:"redis-数据类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#redis-数据类型"},[e("span",null,"Redis 数据类型")])],-1),ce={href:"https://redis.io/docs/data-types/",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://javaguide.cn/database/redis/redis-data-structures-01.html",target:"_blank",rel:"noopener noreferrer"},ue={href:"https://javaguide.cn/database/redis/redis-data-structures-02.html",target:"_blank",rel:"noopener noreferrer"},he=e("h3",{id:"redis-常用的数据类型有哪些",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#redis-常用的数据类型有哪些"},[e("span",null,"Redis 常用的数据类型有哪些？")])],-1),ge=e("p",null,"Redis 中比较常见的数据类型有下面这些：",-1),ke=e("ul",null,[e("li",null,[e("strong",null,"5 种基础数据类型"),s("：String（字符串）、List（列表）、Set（集合）、Hash（散列）、Zset（有序集合）。")]),e("li",null,[e("strong",null,"3 种特殊数据类型"),s("：HyperLogLog（基数统计）、Bitmap （位图）、Geospatial (地理位置)。")])],-1),me={href:"https://javaguide.cn/cs-basics/data-structure/bloom-filter.html",target:"_blank",rel:"noopener noreferrer"},be=i('<h3 id="string-的应用场景有哪些" tabindex="-1"><a class="header-anchor" href="#string-的应用场景有哪些"><span>String 的应用场景有哪些？</span></a></h3><p>String 是 Redis 中最简单同时也是最常用的一个数据类型。它是一种二进制安全的数据类型，可以用来存储任何类型的数据比如字符串、整数、浮点数、图片（图片的 base64 编码或者解码或者图片的路径）、序列化后的对象。</p><p>String 的常见应用场景如下：</p><ul><li>常规数据（比如 Session、Token、序列化后的对象、图片的路径）的缓存；</li><li>计数比如用户单位时间的请求数（简单限流可以用到）、页面单位时间的访问数；</li><li>分布式锁(利用 <code>SETNX key value</code> 命令可以实现一个最简易的分布式锁)；</li><li>……</li></ul>',4),ve={href:"https://javaguide.cn/database/redis/redis-data-structures-01.html",target:"_blank",rel:"noopener noreferrer"},Re=e("h3",{id:"string-还是-hash-存储对象数据更好呢",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#string-还是-hash-存储对象数据更好呢"},[e("span",null,"String 还是 Hash 存储对象数据更好呢？")])],-1),_e=e("ul",null,[e("li",null,"String 存储的是序列化后的对象数据，存放的是整个对象。Hash 是对对象的每个字段单独存储，可以获取部分字段的信息，也可以修改或者添加部分字段，节省网络流量。如果对象中某些字段需要经常变动或者经常需要单独查询对象中的个别字段信息，Hash 就非常适合。"),e("li",null,"String 存储相对来说更加节省内存，缓存相同数量的对象数据，String 消耗的内存约是 Hash 的一半。并且，存储具有多层嵌套的对象时也方便很多。如果系统对性能和资源消耗非常敏感的话，String 就非常适合。")],-1),fe=e("p",null,"在绝大部分情况，我们建议使用 String 来存储对象数据即可！",-1),ye=e("h3",{id:"string-的底层实现是什么",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#string-的底层实现是什么"},[e("span",null,"String 的底层实现是什么？")])],-1),Se=e("code",null,"\\0",-1),xe={href:"https://github.com/antirez/sds",target:"_blank",rel:"noopener noreferrer"},we=e("p",null,"SDS 最早是 Redis 作者为日常 C 语言开发而设计的 C 字符串，后来被应用到了 Redis 上，并经过了大量的修改完善以适合高性能操作。",-1),Oe={href:"https://github.com/redis/redis/blob/7.0/src/sds.h",target:"_blank",rel:"noopener noreferrer"},je=i(`<div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* Note: sdshdr5 is never used, we just access the flags byte directly.
 * However is here to document the layout of type 5 SDS strings. */</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr5</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* 3 lsb of type, and 5 msb of string length */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr8</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint8_t</span> len<span class="token punctuation">;</span> <span class="token comment">/* used */</span>
    <span class="token class-name">uint8_t</span> alloc<span class="token punctuation">;</span> <span class="token comment">/* excluding the header and null terminator */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* 3 lsb of type, 5 unused bits */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr16</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> len<span class="token punctuation">;</span> <span class="token comment">/* used */</span>
    <span class="token class-name">uint16_t</span> alloc<span class="token punctuation">;</span> <span class="token comment">/* excluding the header and null terminator */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* 3 lsb of type, 5 unused bits */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr32</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> len<span class="token punctuation">;</span> <span class="token comment">/* used */</span>
    <span class="token class-name">uint32_t</span> alloc<span class="token punctuation">;</span> <span class="token comment">/* excluding the header and null terminator */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* 3 lsb of type, 5 unused bits */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr64</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint64_t</span> len<span class="token punctuation">;</span> <span class="token comment">/* used */</span>
    <span class="token class-name">uint64_t</span> alloc<span class="token punctuation">;</span> <span class="token comment">/* excluding the header and null terminator */</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> <span class="token comment">/* 3 lsb of type, 5 unused bits */</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过源码可以看出，SDS 共有五种实现方式 SDS_TYPE_5（并未用到）、SDS_TYPE_8、SDS_TYPE_16、SDS_TYPE_32、SDS_TYPE_64，其中只有后四种实际用到。Redis 会根据初始化的长度决定使用哪种类型，从而减少内存的使用。</p><table><thead><tr><th>类型</th><th>字节</th><th>位</th></tr></thead><tbody><tr><td>sdshdr5</td><td>&lt; 1</td><td>&lt;8</td></tr><tr><td>sdshdr8</td><td>1</td><td>8</td></tr><tr><td>sdshdr16</td><td>2</td><td>16</td></tr><tr><td>sdshdr32</td><td>4</td><td>32</td></tr><tr><td>sdshdr64</td><td>8</td><td>64</td></tr></tbody></table><p>对于后四种实现都包含了下面这 4 个属性：</p><ul><li><code>len</code>：字符串的长度也就是已经使用的字节数</li><li><code>alloc</code>：总共可用的字符空间大小，alloc-len 就是 SDS 剩余的空间大小</li><li><code>buf[]</code>：实际存储字符串的数组</li><li><code>flags</code>：低三位保存类型标志</li></ul><p>SDS 相比于 C 语言中的字符串有如下提升：</p><ol><li><strong>可以避免缓冲区溢出</strong>：C 语言中的字符串被修改（比如拼接）时，一旦没有分配足够长度的内存空间，就会造成缓冲区溢出。SDS 被修改时，会先根据 len 属性检查空间大小是否满足要求，如果不满足，则先扩展至所需大小再进行修改操作。</li><li><strong>获取字符串长度的复杂度较低</strong>：C 语言中的字符串的长度通常是经过遍历计数来实现的，时间复杂度为 O(n)。SDS 的长度获取直接读取 len 属性即可，时间复杂度为 O(1)。</li><li><strong>减少内存分配次数</strong>：为了避免修改（增加/减少）字符串时，每次都需要重新分配内存（C 语言的字符串是这样的），SDS 实现了空间预分配和惰性空间释放两种优化策略。当 SDS 需要增加字符串时，Redis 会为 SDS 分配好内存，并且根据特定的算法分配多余的内存，这样可以减少连续执行字符串增长操作所需的内存重分配次数。当 SDS 需要减少字符串时，这部分内存不会立即被回收，会被记录下来，等待后续使用（支持手动释放，有对应的 API）。</li><li><strong>二进制安全</strong>：C 语言中的字符串以空字符 <code>\\0</code> 作为字符串结束的标识，这存在一些问题，像一些二进制文件（比如图片、视频、音频）就可能包括空字符，C 字符串无法正确保存。SDS 使用 len 属性判断字符串是否结束，不存在这个问题。</li></ol><p>🤐 多提一嘴，很多文章里 SDS 的定义是下面这样的：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sdshdr</span> <span class="token punctuation">{</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> len<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> free<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个也没错，Redis 3.2 之前就是这样定义的。后来，由于这种方式的定义存在问题，<code>len</code> 和 <code>free</code> 的定义用了 4 个字节，造成了浪费。Redis 3.2 之后，Redis 改进了 SDS 的定义，将其划分为了现在的 5 种类型。</p><h3 id="购物车信息用-string-还是-hash-存储更好呢" tabindex="-1"><a class="header-anchor" href="#购物车信息用-string-还是-hash-存储更好呢"><span>购物车信息用 String 还是 Hash 存储更好呢?</span></a></h3><p>由于购物车中的商品频繁修改和变动，购物车信息建议使用 Hash 存储：</p><ul><li>用户 id 为 key</li><li>商品 id 为 field，商品数量为 value</li></ul><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/hash-shopping-cart.png" alt="Hash维护简单的购物车信息" tabindex="0"><figcaption>Hash维护简单的购物车信息</figcaption></figure><p>那用户购物车信息的维护具体应该怎么操作呢？</p><ul><li>用户添加商品就是往 Hash 里面增加新的 field 与 value；</li><li>查询购物车信息就是遍历对应的 Hash；</li><li>更改商品数量直接修改对应的 value 值（直接 set 或者做运算皆可）；</li><li>删除商品就是删除 Hash 中对应的 field；</li><li>清空购物车直接删除对应的 key 即可。</li></ul><p>这里只是以业务比较简单的购物车场景举例，实际电商场景下，field 只保存一个商品 id 是没办法满足需求的。</p><h3 id="使用-redis-实现一个排行榜怎么做" tabindex="-1"><a class="header-anchor" href="#使用-redis-实现一个排行榜怎么做"><span>使用 Redis 实现一个排行榜怎么做？</span></a></h3><p>Redis 中有一个叫做 <code>Sorted Set</code> （有序集合）的数据类型经常被用在各种排行榜的场景，比如直播间送礼物的排行榜、朋友圈的微信步数排行榜、王者荣耀中的段位排行榜、话题热度排行榜等等。</p><p>相关的一些 Redis 命令: <code>ZRANGE</code> (从小到大排序)、 <code>ZREVRANGE</code> （从大到小排序）、<code>ZREVRANK</code> (指定元素排名)。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/2021060714195385.png" alt="" tabindex="0"><figcaption></figcaption></figure>`,21),Le={href:"https://javaguide.cn/zhuanlan/java-mian-shi-zhi-bei.html",target:"_blank",rel:"noopener noreferrer"},De=e("figure",null,[e("img",{src:"https://oss.javaguide.cn/github/javaguide/database/redis/image-20220719071115140.png",alt:"",tabindex:"0"}),e("figcaption")],-1),Ie=e("h3",{id:"redis-的有序集合底层为什么要用跳表-而不用平衡树、红黑树或者-b-树",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#redis-的有序集合底层为什么要用跳表-而不用平衡树、红黑树或者-b-树"},[e("span",null,"Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？")])],-1),Pe=e("p",null,"这道面试题很多大厂比较喜欢问，难度还是有点大的。",-1),Ee=e("ul",null,[e("li",null,[s("平衡树 vs 跳表：平衡树的插入、删除和查询的时间复杂度和跳表一样都是 "),e("strong",null,"O(log n)"),s("。对于范围查询来说，平衡树也可以通过中序遍历的方式达到和跳表一样的效果。但是它的每一次插入或者删除操作都需要保证整颗树左右节点的绝对平衡，只要不平衡就要通过旋转操作来保持平衡，这个过程是比较耗时的。跳表诞生的初衷就是为了克服平衡树的一些缺点。跳表使用概率平衡而不是严格强制的平衡，因此，跳表中的插入和删除算法比平衡树的等效算法简单得多，速度也快得多。")]),e("li",null,"红黑树 vs 跳表：相比较于红黑树来说，跳表的实现也更简单一些，不需要通过旋转和染色（红黑变换）来保证黑平衡。并且，按照区间来查找数据这个操作，红黑树的效率没有跳表高。"),e("li",null,"B+树 vs 跳表：B+树更适合作为数据库和文件系统中常用的索引结构之一，它的核心思想是通过可能少的 IO 定位到尽可能多的索引来获得查询数据。对于 Redis 这种内存数据库来说，它对这些并不感冒，因为 Redis 作为内存数据库它不可能存储大量的数据，所以对于索引不需要通过 B+树这种方式进行维护，只需按照概率进行随机维护即可，节约内存。而且使用跳表实现 zset 时相较前者来说更简单一些，在进行插入时只需通过索引将数据插入到链表中合适的位置再随机维护一定高度的索引即可，也不需要像 B+树那样插入时发现失衡时还需要对节点分裂与合并。")],-1),Be=i(`<h3 id="set-的应用场景是什么" tabindex="-1"><a class="header-anchor" href="#set-的应用场景是什么"><span>Set 的应用场景是什么？</span></a></h3><p>Redis 中 <code>Set</code> 是一种无序集合，集合中的元素没有先后顺序但都唯一，有点类似于 Java 中的 <code>HashSet</code> 。</p><p><code>Set</code> 的常见应用场景如下：</p><ul><li>存放的数据不能重复的场景：网站 UV 统计（数据量巨大的场景还是 <code>HyperLogLog</code>更适合一些）、文章点赞、动态点赞等等。</li><li>需要获取多个数据源交集、并集和差集的场景：共同好友(交集)、共同粉丝(交集)、共同关注(交集)、好友推荐（差集）、音乐推荐（差集）、订阅号推荐（差集+交集） 等等。</li><li>需要随机获取数据源中的元素的场景：抽奖系统、随机点名等等。</li></ul><h3 id="使用-set-实现抽奖系统怎么做" tabindex="-1"><a class="header-anchor" href="#使用-set-实现抽奖系统怎么做"><span>使用 Set 实现抽奖系统怎么做？</span></a></h3><p>如果想要使用 <code>Set</code> 实现一个简单的抽奖系统的话，直接使用下面这几个命令就可以了：</p><ul><li><code>SADD key member1 member2 ...</code>：向指定集合添加一个或多个元素。</li><li><code>SPOP key count</code>：随机移除并获取指定集合中一个或多个元素，适合不允许重复中奖的场景。</li><li><code>SRANDMEMBER key count</code> : 随机获取指定集合中指定数量的元素，适合允许重复中奖的场景。</li></ul><h3 id="使用-bitmap-统计活跃用户怎么做" tabindex="-1"><a class="header-anchor" href="#使用-bitmap-统计活跃用户怎么做"><span>使用 Bitmap 统计活跃用户怎么做？</span></a></h3><p>Bitmap 存储的是连续的二进制数字（0 和 1），通过 Bitmap, 只需要一个 bit 位来表示某个元素对应的值或者状态，key 就是对应元素本身 。我们知道 8 个 bit 可以组成一个 byte，所以 Bitmap 本身会极大的节省储存空间。</p><p>你可以将 Bitmap 看作是一个存储二进制数字（0 和 1）的数组，数组中每个元素的下标叫做 offset（偏移量）。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/image-20220720194154133.png" alt="img" tabindex="0"><figcaption>img</figcaption></figure><p>如果想要使用 Bitmap 统计活跃用户的话，可以使用日期（精确到天）作为 key，然后用户 ID 为 offset，如果当日活跃过就设置为 1。</p><p>初始化数据：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> SETBIT <span class="token number">20210308</span> <span class="token number">1</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token operator">&gt;</span> SETBIT <span class="token number">20210308</span> <span class="token number">2</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token operator">&gt;</span> SETBIT <span class="token number">20210309</span> <span class="token number">1</span> <span class="token number">1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>统计 20210308~20210309 总活跃用户数:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> BITOP and desk1 <span class="token number">20210308</span> <span class="token number">20210309</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> BITCOUNT desk1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>统计 20210308~20210309 在线活跃用户数:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> BITOP or desk2 <span class="token number">20210308</span> <span class="token number">20210309</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token operator">&gt;</span> BITCOUNT desk2
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-hyperloglog-统计页面-uv-怎么做" tabindex="-1"><a class="header-anchor" href="#使用-hyperloglog-统计页面-uv-怎么做"><span>使用 HyperLogLog 统计页面 UV 怎么做？</span></a></h3><p>使用 HyperLogLog 统计页面 UV 主要需要用到下面这两个命令：</p><ul><li><code>PFADD key element1 element2 ...</code>：添加一个或多个元素到 HyperLogLog 中。</li><li><code>PFCOUNT key1 key2</code>：获取一个或者多个 HyperLogLog 的唯一计数。</li></ul><p>1、将访问指定页面的每个用户 ID 添加到 <code>HyperLogLog</code> 中。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PFADD PAGE_1:UV USER1 USER2 <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> USERn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2、统计指定页面的 UV。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>PFCOUNT PAGE_1:UV
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="redis-持久化机制-重要" tabindex="-1"><a class="header-anchor" href="#redis-持久化机制-重要"><span>Redis 持久化机制（重要）</span></a></h2>`,26),Te={href:"https://javaguide.cn/database/redis/redis-persistence.html",target:"_blank",rel:"noopener noreferrer"},Ne=i('<h2 id="redis-线程模型-重要" tabindex="-1"><a class="header-anchor" href="#redis-线程模型-重要"><span>Redis 线程模型（重要）</span></a></h2><p>对于读写命令来说，Redis 一直是单线程模型。不过，在 Redis 4.0 版本之后引入了多线程来执行一些大键值对的异步删除操作， Redis 6.0 版本之后引入了多线程来处理网络请求（提高网络 IO 读写性能）。</p><h3 id="redis-单线程模型了解吗" tabindex="-1"><a class="header-anchor" href="#redis-单线程模型了解吗"><span>Redis 单线程模型了解吗？</span></a></h3><p><strong>Redis 基于 Reactor 模式设计开发了一套高效的事件处理模型</strong> （Netty 的线程模型也基于 Reactor 模式，Reactor 模式不愧是高性能 IO 的基石），这套事件处理模型对应的是 Redis 中的文件事件处理器（file event handler）。由于文件事件处理器（file event handler）是单线程方式运行的，所以我们一般都说 Redis 是单线程模型。</p><p>《Redis 设计与实现》有一段话是如是介绍文件事件处理器的，我觉得写得挺不错。</p><blockquote><p>Redis 基于 Reactor 模式开发了自己的网络事件处理器：这个处理器被称为文件事件处理器（file event handler）。</p><ul><li>文件事件处理器使用 I/O 多路复用（multiplexing）程序来同时监听多个套接字，并根据套接字目前执行的任务来为套接字关联不同的事件处理器。</li><li>当被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关 闭（close）等操作时，与操作相对应的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。</li></ul><p><strong>虽然文件事件处理器以单线程方式运行，但通过使用 I/O 多路复用程序来监听多个套接字</strong>，文件事件处理器既实现了高性能的网络通信模型，又可以很好地与 Redis 服务器中其他同样以单线程方式运行的模块进行对接，这保持了 Redis 内部单线程设计的简单性。</p></blockquote><p><strong>既然是单线程，那怎么监听大量的客户端连接呢？</strong></p><p>Redis 通过 <strong>IO 多路复用程序</strong> 来监听来自客户端的大量连接（或者说是监听多个 socket），它会将感兴趣的事件及类型（读、写）注册到内核中并监听每个事件是否发生。</p><p>这样的好处非常明显：<strong>I/O 多路复用技术的使用让 Redis 不需要额外创建多余的线程来监听客户端的大量连接，降低了资源的消耗</strong>（和 NIO 中的 <code>Selector</code> 组件很像）。</p><p>文件事件处理器（file event handler）主要是包含 4 个部分：</p><ul><li>多个 socket（客户端连接）</li><li>IO 多路复用程序（支持多个客户端连接的关键）</li><li>文件事件分派器（将 socket 关联到相应的事件处理器）</li><li>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</li></ul><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-event-handler.png" alt="文件事件处理器（file event handler）" tabindex="0"><figcaption>文件事件处理器（file event handler）</figcaption></figure>',12),Ce={href:"http://remcarpediem.net/article/1aa2da89/",target:"_blank",rel:"noopener noreferrer"},Ae=i('<h3 id="redis6-0-之前为什么不使用多线程" tabindex="-1"><a class="header-anchor" href="#redis6-0-之前为什么不使用多线程"><span>Redis6.0 之前为什么不使用多线程？</span></a></h3><p>虽然说 Redis 是单线程模型，但是，实际上，<strong>Redis 在 4.0 之后的版本中就已经加入了对多线程的支持。</strong></p><p>不过，Redis 4.0 增加的多线程主要是针对一些大键值对的删除操作的命令，使用这些命令就会使用主线程之外的其他线程来“异步处理”。</p><p>为此，Redis 4.0 之后新增了<code>UNLINK</code>（可以看作是 <code>DEL</code> 的异步版本）、<code>FLUSHALL ASYNC</code>（清空所有数据库的所有 key，不仅仅是当前 <code>SELECT</code> 的数据库）、<code>FLUSHDB ASYNC</code>（清空当前 <code>SELECT</code> 数据库中的所有 key）等异步命令。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis4.0-more-thread.png" alt="redis4.0 more thread" tabindex="0"><figcaption>redis4.0 more thread</figcaption></figure><p>大体上来说，Redis 6.0 之前主要还是单线程处理。</p><p><strong>那 Redis6.0 之前为什么不使用多线程？</strong> 我觉得主要原因有 3 点：</p><ul><li>单线程编程容易并且更容易维护；</li><li>Redis 的性能瓶颈不在 CPU ，主要在内存和网络；</li><li>多线程就会存在死锁、线程上下文切换等问题，甚至会影响性能。</li></ul>',8),He={href:"https://draveness.me/whys-the-design-redis-single-thread/",target:"_blank",rel:"noopener noreferrer"},Ue=i(`<h3 id="redis6-0-之后为何引入了多线程" tabindex="-1"><a class="header-anchor" href="#redis6-0-之后为何引入了多线程"><span>Redis6.0 之后为何引入了多线程？</span></a></h3><p><strong>Redis6.0 引入多线程主要是为了提高网络 IO 读写性能</strong>，因为这个算是 Redis 中的一个性能瓶颈（Redis 的瓶颈主要受限于内存和网络）。</p><p>虽然，Redis6.0 引入了多线程，但是 Redis 的多线程只是在网络数据的读写这类耗时操作上使用了，执行命令仍然是单线程顺序执行。因此，你也不需要担心线程安全问题。</p><p>Redis6.0 的多线程默认是禁用的，只使用主线程。如需开启需要设置 IO 线程数 &gt; 1，需要修改 redis 配置文件 <code>redis.conf</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>io-threads <span class="token number">4</span> <span class="token comment">#设置1的话只会开启主线程，官网建议4核的机器建议设置为2或3个线程，8核的建议设置为6个线程</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另外：</p><ul><li>io-threads 的个数一旦设置，不能通过 config 动态设置。</li><li>当设置 ssl 后，io-threads 将不工作。</li></ul><p>开启多线程后，默认只会使用多线程进行 IO 写入 writes，即发送数据给客户端，如果需要开启多线程 IO 读取 reads，同样需要修改 redis 配置文件 <code>redis.conf</code> :</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>io-threads-do-reads <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是官网描述开启多线程读并不能有太大提升，因此一般情况下并不建议开启</p><p>相关阅读：</p>`,11),Me={href:"https://mp.weixin.qq.com/s/FZu3acwK6zrCBZQ_3HoUgw",target:"_blank",rel:"noopener noreferrer"},Xe={href:"https://segmentfault.com/a/1190000039223696",target:"_blank",rel:"noopener noreferrer"},qe=i('<h3 id="redis-后台线程了解吗" tabindex="-1"><a class="header-anchor" href="#redis-后台线程了解吗"><span>Redis 后台线程了解吗？</span></a></h3><p>我们虽然经常说 Redis 是单线程模型（主要逻辑是单线程完成的），但实际还有一些后台线程用于执行一些比较耗时的操作：</p><ul><li>通过 <code>bio_close_file</code> 后台线程来释放 AOF / RDB 等过程中产生的临时文件资源。</li><li>通过 <code>bio_aof_fsync</code> 后台线程调用 <code>fsync</code> 函数将系统内核缓冲区还未同步到到磁盘的数据强制刷到磁盘（ AOF 文件）。</li><li>通过 <code>bio_lazy_free</code>后台线程释放大对象（已删除）占用的内存空间.</li></ul>',3),Fe=e("code",null,"bio.h",-1),Ge={href:"https://github.com/redis/redis/blob/6.0/src/bio.h",target:"_blank",rel:"noopener noreferrer"},Ve=i(`<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>#ifndef __BIO_H
#define __BIO_H

<span class="token comment">/* Exported API */</span>
<span class="token keyword">void</span> <span class="token function">bioInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">bioCreateBackgroundJob</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg1<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg2<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>arg3<span class="token punctuation">)</span><span class="token punctuation">;</span>
unsigned <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">bioPendingJobsOfType</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
unsigned <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">bioWaitStepOfType</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
time_t <span class="token function">bioOlderJobOfType</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">bioKillThreads</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Background job opcodes */</span>
#define <span class="token constant">BIO_CLOSE_FILE</span>    <span class="token number">0</span> <span class="token comment">/* Deferred close(2) syscall. */</span>
#define <span class="token constant">BIO_AOF_FSYNC</span>     <span class="token number">1</span> <span class="token comment">/* Deferred AOF fsync. */</span>
#define <span class="token constant">BIO_LAZY_FREE</span>     <span class="token number">2</span> <span class="token comment">/* Deferred objects freeing. */</span>
#define <span class="token constant">BIO_NUM_OPS</span>       <span class="token number">3</span>

#endif
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ke={href:"https://juejin.cn/post/7102780434739626014",target:"_blank",rel:"noopener noreferrer"},Je=i(`<h2 id="redis-内存管理" tabindex="-1"><a class="header-anchor" href="#redis-内存管理"><span>Redis 内存管理</span></a></h2><h3 id="redis-给缓存数据设置过期时间有啥用" tabindex="-1"><a class="header-anchor" href="#redis-给缓存数据设置过期时间有啥用"><span>Redis 给缓存数据设置过期时间有啥用？</span></a></h3><p>一般情况下，我们设置保存的缓存数据的时候都会设置一个过期时间。为什么呢？</p><p>因为内存是有限的，如果缓存中的所有数据都是一直保存的话，分分钟直接 Out of memory。</p><p>Redis 自带了给缓存数据设置过期时间的功能，比如：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> expire key <span class="token number">60</span> <span class="token comment"># 数据在 60s 后过期</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setex key <span class="token number">60</span> value <span class="token comment"># 数据在 60s 后过期 (setex:[set] + [ex]pire)</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl key <span class="token comment"># 查看数据还有多久过期</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">56</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<strong>Redis 中除了字符串类型有自己独有设置过期时间的命令 <code>setex</code> 外，其他方法都需要依靠 <code>expire</code> 命令来设置过期时间 。另外， <code>persist</code> 命令可以移除一个键的过期时间。</strong></p><p><strong>过期时间除了有助于缓解内存的消耗，还有什么其他用么？</strong></p><p>很多时候，我们的业务场景就是需要某个数据只在某一时间段内存在，比如我们的短信验证码可能只在 1 分钟内有效，用户登录的 Token 可能只在 1 天内有效。</p><p>如果使用传统的数据库来处理的话，一般都是自己判断过期，这样更麻烦并且性能要差很多。</p><h3 id="redis-是如何判断数据是否过期的呢" tabindex="-1"><a class="header-anchor" href="#redis-是如何判断数据是否过期的呢"><span>Redis 是如何判断数据是否过期的呢？</span></a></h3><p>Redis 通过一个叫做过期字典（可以看作是 hash 表）来保存数据过期的时间。过期字典的键指向 Redis 数据库中的某个 key(键)，过期字典的值是一个 long long 类型的整数，这个整数保存了 key 所指向的数据库键的过期时间（毫秒精度的 UNIX 时间戳）。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/database/redis/redis-expired-dictionary.png" alt="redis过期字典" tabindex="0"><figcaption>redis过期字典</figcaption></figure><p>过期字典是存储在 redisDb 这个结构里的：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisDb</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span>     <span class="token comment">//数据库键空间,保存着数据库中所有键值对</span>
    dict <span class="token operator">*</span>expires   <span class="token comment">// 过期字典,保存着键的过期时间</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> redisDb<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="过期的数据的删除策略了解么" tabindex="-1"><a class="header-anchor" href="#过期的数据的删除策略了解么"><span>过期的数据的删除策略了解么？</span></a></h3><p>如果假设你设置了一批 key 只能存活 1 分钟，那么 1 分钟后，Redis 是怎么对这批 key 进行删除的呢？</p><p>常用的过期数据的删除策略就两个（重要！自己造缓存轮子的时候需要格外考虑的东西）：</p><ol><li><strong>惰性删除</strong>：只会在取出 key 的时候才对数据进行过期检查。这样对 CPU 最友好，但是可能会造成太多过期 key 没有被删除。</li><li><strong>定期删除</strong>：每隔一段时间抽取一批 key 执行删除过期 key 操作。并且，Redis 底层会通过限制删除操作执行的时长和频率来减少删除操作对 CPU 时间的影响。</li></ol><p>定期删除对内存更加友好，惰性删除对 CPU 更加友好。两者各有千秋，所以 Redis 采用的是 <strong>定期删除+惰性/懒汉式删除</strong> 。</p><p>但是，仅仅通过给 key 设置过期时间还是有问题的。因为还是可能存在定期删除和惰性删除漏掉了很多过期 key 的情况。这样就导致大量过期 key 堆积在内存里，然后就 Out of memory 了。</p><p>怎么解决这个问题呢？答案就是：<strong>Redis 内存淘汰机制。</strong></p><h3 id="redis-内存淘汰机制了解么" tabindex="-1"><a class="header-anchor" href="#redis-内存淘汰机制了解么"><span>Redis 内存淘汰机制了解么？</span></a></h3><blockquote><p>相关问题：MySQL 里有 2000w 数据，Redis 中只存 20w 的数据，如何保证 Redis 中的数据都是热点数据?</p></blockquote><p>Redis 提供 6 种数据淘汰策略：</p><ol><li><strong>volatile-lru（least recently used）</strong>：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选最近最少使用的数据淘汰。</li><li><strong>volatile-ttl</strong>：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选将要过期的数据淘汰。</li><li><strong>volatile-random</strong>：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中任意选择数据淘汰。</li><li><strong>allkeys-lru（least recently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的 key（这个是最常用的）。</li><li><strong>allkeys-random</strong>：从数据集（<code>server.db[i].dict</code>）中任意选择数据淘汰。</li><li><strong>no-eviction</strong>：禁止驱逐数据，也就是说当内存不足以容纳新写入数据时，新写入操作会报错。这个应该没人使用吧！</li></ol><p>4.0 版本后增加以下两种：</p><ol start="7"><li><strong>volatile-lfu（least frequently used）</strong>：从已设置过期时间的数据集（<code>server.db[i].expires</code>）中挑选最不经常使用的数据淘汰。</li><li><strong>allkeys-lfu（least frequently used）</strong>：当内存不足以容纳新写入数据时，在键空间中，移除最不经常使用的 key。</li></ol><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,29),Qe=e("li",null,"《Redis 开发与运维》",-1),Ye=e("li",null,"《Redis 设计与实现》",-1),ze={href:"https://www.redis.com.cn/commands.html",target:"_blank",rel:"noopener noreferrer"},Ze={href:"https://mp.weixin.qq.com/s/FA4XVAXJksTOHUXMsayy2g",target:"_blank",rel:"noopener noreferrer"},We={href:"https://medium.com/@jychen7/sharing-redis-single-thread-vs-multi-threads-5870bd44d153",target:"_blank",rel:"noopener noreferrer"};function $e(es,ss){const a=l("ExternalLinkIcon"),t=l("RouteLink");return r(),c("div",null,[h,g,e("p",null,[e("a",k,[s("Redis"),n(a)]),s(" （"),m,s("mote "),b,s("ctionary "),v,s("erver）是一个基于 C 语言开发的开源 NoSQL 数据库（BSD 许可）。与传统数据库不同的是，Redis 的数据是保存在内存中的（内存数据库，支持持久化），因此读写速度非常快，被广泛应用于分布式缓存方向。并且，Redis 存储的是 KV 键值对数据。")]),R,_,f,e("p",null,[s("个人学习的话，你可以自己本机安装 Redis 或者通过 Redis 官网提供的"),e("a",y,[s("在线 Redis 环境"),n(a)]),s("（少部分命令无法使用）来实际体验 Redis。")]),S,e("p",null,[s("全世界有非常多的网站使用到了 Redis ，"),e("a",x,[s("techstacks.io"),n(a)]),s(" 专门维护了一个"),e("a",w,[s("使用 Redis 的热门站点列表"),n(a)]),s(" ，感兴趣的话可以看看。")]),O,j,L,e("blockquote",null,[e("p",null,[s("下面这张图片总结的挺不错的，分享一下，出自 "),e("a",D,[s("Why is Redis so fast?"),n(a)]),s(" 。")])]),I,e("p",null,[s("有一些大厂也开源了类似于 Redis 的分布式高性能 KV 存储数据库，例如，腾讯开源的 "),e("a",P,[s("Tendis"),n(a)]),s(" 。Tendis 基于知名开源项目 "),e("a",E,[s("RocksDB"),n(a)]),s(" 作为存储引擎 ，100% 兼容 Redis 协议和 Redis4.0 所有数据模型。关于 Redis 和 Tendis 的对比，腾讯官方曾经发过一篇文章："),e("a",B,[s("Redis vs Tendis：冷热混合存储版架构揭秘"),n(a)]),s(" ，可以简单参考一下。")]),T,N,e("ul",null,[e("li",null,[e("a",C,[s("Dragonfly"),n(a)]),s("：一种针对现代应用程序负荷需求而构建的内存数据库，完全兼容 Redis 和 Memcached 的 API，迁移时无需修改任何代码，号称全世界最快的内存数据库。")]),e("li",null,[e("a",A,[s("KeyDB"),n(a)]),s("： Redis 的一个高性能分支，专注于多线程、内存效率和高吞吐量。")])]),H,e("p",null,[s("关于常见的缓存读写策略的详细介绍，可以看我写的这篇文章："),e("a",U,[s("3 种常用的缓存读写策略详解"),n(a)]),s(" 。")]),M,X,q,F,e("ul",null,[e("li",null,[e("a",G,[s("RediSearch"),n(a)]),s("：用于实现搜索引擎的模块。")]),e("li",null,[e("a",V,[s("RedisJSON"),n(a)]),s("：用于处理 JSON 数据的模块。")]),e("li",null,[e("a",K,[s("RedisGraph"),n(a)]),s("：用于实现图形数据库的模块。")]),e("li",null,[e("a",J,[s("RedisTimeSeries"),n(a)]),s("：用于处理时间序列数据的模块。")]),e("li",null,[e("a",Q,[s("RedisBloom"),n(a)]),s("：用于实现布隆过滤器的模块。")]),e("li",null,[e("a",Y,[s("RedisAI"),n(a)]),s("：用于执行深度学习/机器学习模型并管理其数据的模块。")]),e("li",null,[e("a",z,[s("RedisCell"),n(a)]),s("：用于实现分布式限流的模块。")]),Z]),e("p",null,[s("关于 Redis 模块的详细介绍，可以查看官方文档："),e("a",W,[s("https://redis.io/modules"),n(a)]),s("。")]),$,ee,e("ul",null,[e("li",null,[se,s("：通过 Redis 来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson 来实现分布式锁。关于 Redis 实现分布式锁的详细介绍，可以看我写的这篇文章："),e("a",ne,[s("分布式锁详解"),n(a)]),s(" 。")]),ae]),ie,e("p",null,[s("关于 Redis 实现分布式锁的详细介绍，可以看我写的这篇文章："),e("a",te,[s("分布式锁详解"),n(a)]),s(" 。")]),le,e("p",null,[s("相关阅读："),e("a",de,[s("Redis 消息队列发展历程 - 阿里开发者 - 2022"),n(a)]),s("。")]),oe,e("p",null,[s("关于 Redis 实现延时任务的详细介绍，可以看我写的这篇文章："),n(t,{to:"/database/redis/redis-delayed-task.html"},{default:d(()=>[s("如何基于 Redis 实现延时任务？")]),_:1}),s("。")]),re,e("p",null,[s("关于 Redis 5 种基础数据类型和 3 种特殊数据类型的详细介绍请看下面这两篇文章以及 "),e("a",ce,[s("Redis 官方文档"),n(a)]),s(" ：")]),e("ul",null,[e("li",null,[e("a",pe,[s("Redis 5 种基本数据类型详解"),n(a)])]),e("li",null,[e("a",ue,[s("Redis 3 种特殊数据类型详解"),n(a)])])]),he,ge,ke,e("p",null,[s("除了上面提到的之外，还有一些其他的比如 "),e("a",me,[s("Bloom filter（布隆过滤器）"),n(a)]),s("、Bitfield（位域）。")]),be,e("p",null,[s("关于 String 的详细介绍请看这篇文章："),e("a",ve,[s("Redis 5 种基本数据类型详解"),n(a)]),s("。")]),Re,_e,fe,ye,e("p",null,[s("Redis 是基于 C 语言编写的，但 Redis 的 String 类型的底层实现并不是 C 语言中的字符串（即以空字符 "),Se,s(" 结尾的字符数组），而是自己编写了 "),e("a",xe,[s("SDS"),n(a)]),s("（Simple Dynamic String，简单动态字符串） 来作为底层实现。")]),we,e("p",null,[s("Redis7.0 的 SDS 的部分源码如下（"),e("a",Oe,[s("https://github.com/redis/redis/blob/7.0/src/sds.h"),n(a)]),s("）:")]),je,e("p",null,[e("a",Le,[s("《Java 面试指北》"),n(a)]),s(" 的「技术面试题篇」就有一篇文章详细介绍如何使用 Sorted Set 来设计制作一个排行榜，感兴趣的小伙伴可以看看。")]),De,Ie,Pe,Ee,e("p",null,[s("另外，我还单独写了一篇文章从有序集合的基本使用到跳表的源码分析和实现，让你会对 Redis 的有序集合底层实现的跳表有着更深刻的理解和掌握 ："),n(t,{to:"/database/redis/redis-skiplist.html"},{default:d(()=>[s("Redis 为什么用跳表实现有序集合")]),_:1}),s("。")]),Be,e("p",null,[s("Redis 持久化机制（RDB 持久化、AOF 持久化、RDB 和 AOF 的混合持久化） 相关的问题比较多，也比较重要，于是我单独抽了一篇文章来总结 Redis 持久化机制相关的知识点和问题："),e("a",Te,[s("Redis 持久化机制详解"),n(a)]),s(" 。")]),Ne,e("p",null,[s("相关阅读："),e("a",Ce,[s("Redis 事件机制详解"),n(a)]),s(" 。")]),Ae,e("p",null,[s("相关阅读："),e("a",He,[s("为什么 Redis 选择单线程模型？"),n(a)]),s(" 。")]),Ue,e("ul",null,[e("li",null,[e("a",Me,[s("Redis 6.0 新特性-多线程连环 13 问！"),n(a)])]),e("li",null,[e("a",Xe,[s("Redis 多线程网络模型全面揭秘"),n(a)]),s("（推荐）")])]),qe,e("p",null,[s("在"),Fe,s(" 文件中有定义（Redis 6.0 版本，源码地址："),e("a",Ge,[s("https://github.com/redis/redis/blob/6.0/src/bio.h"),n(a)]),s("）：")]),Ve,e("p",null,[s("关于 Redis 后台线程的详细介绍可以查看 "),e("a",Ke,[s("Redis 6.0 后台线程有哪些？"),n(a)]),s(" 这篇就文章。")]),Je,e("ul",null,[Qe,Ye,e("li",null,[s("Redis 命令手册："),e("a",ze,[s("https://www.redis.com.cn/commands.html"),n(a)])]),e("li",null,[s("RedisSearch 终极使用指南，你值得拥有！："),e("a",Ze,[s("https://mp.weixin.qq.com/s/FA4XVAXJksTOHUXMsayy2g"),n(a)])]),e("li",null,[s("WHY Redis choose single thread (vs multi threads): "),e("a",We,[s("https://medium.com/@jychen7/sharing-redis-single-thread-vs-multi-threads-5870bd44d153"),n(a)])])])])}const is=o(u,[["render",$e],["__file","redis-questions-01.html.vue"]]),ts=JSON.parse('{"path":"/database/redis/redis-questions-01.html","title":"Redis常见面试题总结(上)","lang":"zh-CN","frontmatter":{"title":"Redis常见面试题总结(上)","category":"数据库","tag":["Redis"],"head":[["meta",{"name":"keywords","content":"Redis基础,Redis常见数据结构,Redis线程模型,Redis内存管理,Redis事务,Redis性能优化"}],["meta",{"name":"description","content":"一篇文章总结Redis常见的知识点和面试题，涵盖Redis基础、Redis常见数据结构、Redis线程模型、Redis内存管理、Redis事务、Redis性能优化等内容。"}],["meta",{"property":"og:url","content":"https://snailcoding.cn/database/redis/redis-questions-01.html"}],["meta",{"property":"og:site_name","content":"蜗牛のJava宝典"}],["meta",{"property":"og:title","content":"Redis常见面试题总结(上)"}],["meta",{"property":"og:description","content":"Redis 基础 什么是 Redis？ Redis （REmote DIctionary Server）是一个基于 C 语言开发的开源 NoSQL 数据库（BSD 许可）。与传统数据库不同的是，Redis 的数据是保存在内存中的（内存数据库，支持持久化），因此读写速度非常快，被广泛应用于分布式缓存方向。并且，Redis 存储的是 KV 键值对数据。 为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/database/redis/redis-overview-of-data-types-2023-09-28.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Redis常见面试题总结(上)"}],["meta",{"property":"article:author","content":"Mr.Xu"}],["meta",{"property":"article:tag","content":"Redis"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis常见面试题总结(上)\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-overview-of-data-types-2023-09-28.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/try.redis.io.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-pub-sub.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-pubsub-message-queue.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-stream-structure.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/hash-shopping-cart.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/2021060714195385.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/image-20220719071115140.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/image-20220720194154133.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-event-handler.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis4.0-more-thread.png\\",\\"https://oss.javaguide.cn/github/javaguide/database/redis/redis-expired-dictionary.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Xu\\",\\"url\\":\\"https://snailcoding.cn\\"}]}"]],"description":"Redis 基础 什么是 Redis？ Redis （REmote DIctionary Server）是一个基于 C 语言开发的开源 NoSQL 数据库（BSD 许可）。与传统数据库不同的是，Redis 的数据是保存在内存中的（内存数据库，支持持久化），因此读写速度非常快，被广泛应用于分布式缓存方向。并且，Redis 存储的是 KV 键值对数据。 为..."},"headers":[{"level":2,"title":"Redis 基础","slug":"redis-基础","link":"#redis-基础","children":[{"level":3,"title":"什么是 Redis？","slug":"什么是-redis","link":"#什么是-redis","children":[]},{"level":3,"title":"Redis 为什么这么快？","slug":"redis-为什么这么快","link":"#redis-为什么这么快","children":[]},{"level":3,"title":"分布式缓存常见的技术选型方案有哪些？","slug":"分布式缓存常见的技术选型方案有哪些","link":"#分布式缓存常见的技术选型方案有哪些","children":[]},{"level":3,"title":"说一下 Redis 和 Memcached 的区别和共同点","slug":"说一下-redis-和-memcached-的区别和共同点","link":"#说一下-redis-和-memcached-的区别和共同点","children":[]},{"level":3,"title":"为什么要用 Redis/为什么要用缓存？","slug":"为什么要用-redis-为什么要用缓存","link":"#为什么要用-redis-为什么要用缓存","children":[]},{"level":3,"title":"常见的缓存读写策略有哪些？","slug":"常见的缓存读写策略有哪些","link":"#常见的缓存读写策略有哪些","children":[]},{"level":3,"title":"什么是 Redis Module？有什么用？","slug":"什么是-redis-module-有什么用","link":"#什么是-redis-module-有什么用","children":[]}]},{"level":2,"title":"Redis 应用","slug":"redis-应用","link":"#redis-应用","children":[{"level":3,"title":"Redis 除了做缓存，还能做什么？","slug":"redis-除了做缓存-还能做什么","link":"#redis-除了做缓存-还能做什么","children":[]},{"level":3,"title":"如何基于 Redis 实现分布式锁？","slug":"如何基于-redis-实现分布式锁","link":"#如何基于-redis-实现分布式锁","children":[]},{"level":3,"title":"Redis 可以做消息队列么？","slug":"redis-可以做消息队列么","link":"#redis-可以做消息队列么","children":[]},{"level":3,"title":"Redis 可以做搜索引擎么？","slug":"redis-可以做搜索引擎么","link":"#redis-可以做搜索引擎么","children":[]},{"level":3,"title":"如何基于 Redis 实现延时任务？","slug":"如何基于-redis-实现延时任务","link":"#如何基于-redis-实现延时任务","children":[]}]},{"level":2,"title":"Redis 数据类型","slug":"redis-数据类型","link":"#redis-数据类型","children":[{"level":3,"title":"Redis 常用的数据类型有哪些？","slug":"redis-常用的数据类型有哪些","link":"#redis-常用的数据类型有哪些","children":[]},{"level":3,"title":"String 的应用场景有哪些？","slug":"string-的应用场景有哪些","link":"#string-的应用场景有哪些","children":[]},{"level":3,"title":"String 还是 Hash 存储对象数据更好呢？","slug":"string-还是-hash-存储对象数据更好呢","link":"#string-还是-hash-存储对象数据更好呢","children":[]},{"level":3,"title":"String 的底层实现是什么？","slug":"string-的底层实现是什么","link":"#string-的底层实现是什么","children":[]},{"level":3,"title":"购物车信息用 String 还是 Hash 存储更好呢?","slug":"购物车信息用-string-还是-hash-存储更好呢","link":"#购物车信息用-string-还是-hash-存储更好呢","children":[]},{"level":3,"title":"使用 Redis 实现一个排行榜怎么做？","slug":"使用-redis-实现一个排行榜怎么做","link":"#使用-redis-实现一个排行榜怎么做","children":[]},{"level":3,"title":"Redis 的有序集合底层为什么要用跳表，而不用平衡树、红黑树或者 B+树？","slug":"redis-的有序集合底层为什么要用跳表-而不用平衡树、红黑树或者-b-树","link":"#redis-的有序集合底层为什么要用跳表-而不用平衡树、红黑树或者-b-树","children":[]},{"level":3,"title":"Set 的应用场景是什么？","slug":"set-的应用场景是什么","link":"#set-的应用场景是什么","children":[]},{"level":3,"title":"使用 Set 实现抽奖系统怎么做？","slug":"使用-set-实现抽奖系统怎么做","link":"#使用-set-实现抽奖系统怎么做","children":[]},{"level":3,"title":"使用 Bitmap 统计活跃用户怎么做？","slug":"使用-bitmap-统计活跃用户怎么做","link":"#使用-bitmap-统计活跃用户怎么做","children":[]},{"level":3,"title":"使用 HyperLogLog 统计页面 UV 怎么做？","slug":"使用-hyperloglog-统计页面-uv-怎么做","link":"#使用-hyperloglog-统计页面-uv-怎么做","children":[]}]},{"level":2,"title":"Redis 持久化机制（重要）","slug":"redis-持久化机制-重要","link":"#redis-持久化机制-重要","children":[]},{"level":2,"title":"Redis 线程模型（重要）","slug":"redis-线程模型-重要","link":"#redis-线程模型-重要","children":[{"level":3,"title":"Redis 单线程模型了解吗？","slug":"redis-单线程模型了解吗","link":"#redis-单线程模型了解吗","children":[]},{"level":3,"title":"Redis6.0 之前为什么不使用多线程？","slug":"redis6-0-之前为什么不使用多线程","link":"#redis6-0-之前为什么不使用多线程","children":[]},{"level":3,"title":"Redis6.0 之后为何引入了多线程？","slug":"redis6-0-之后为何引入了多线程","link":"#redis6-0-之后为何引入了多线程","children":[]},{"level":3,"title":"Redis 后台线程了解吗？","slug":"redis-后台线程了解吗","link":"#redis-后台线程了解吗","children":[]}]},{"level":2,"title":"Redis 内存管理","slug":"redis-内存管理","link":"#redis-内存管理","children":[{"level":3,"title":"Redis 给缓存数据设置过期时间有啥用？","slug":"redis-给缓存数据设置过期时间有啥用","link":"#redis-给缓存数据设置过期时间有啥用","children":[]},{"level":3,"title":"Redis 是如何判断数据是否过期的呢？","slug":"redis-是如何判断数据是否过期的呢","link":"#redis-是如何判断数据是否过期的呢","children":[]},{"level":3,"title":"过期的数据的删除策略了解么？","slug":"过期的数据的删除策略了解么","link":"#过期的数据的删除策略了解么","children":[]},{"level":3,"title":"Redis 内存淘汰机制了解么？","slug":"redis-内存淘汰机制了解么","link":"#redis-内存淘汰机制了解么","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":38.04,"words":11411},"filePathRelative":"database/redis/redis-questions-01.md","excerpt":"<h2>Redis 基础</h2>\\n<h3>什么是 Redis？</h3>\\n<p><a href=\\"https://redis.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Redis</a> （<strong>RE</strong>mote <strong>DI</strong>ctionary <strong>S</strong>erver）是一个基于 C 语言开发的开源 NoSQL 数据库（BSD 许可）。与传统数据库不同的是，Redis 的数据是保存在内存中的（内存数据库，支持持久化），因此读写速度非常快，被广泛应用于分布式缓存方向。并且，Redis 存储的是 KV 键值对数据。</p>","autoDesc":true}');export{is as comp,ts as data};
