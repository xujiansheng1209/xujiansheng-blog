import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as t,c as i,a as s,d as a,b as l,e as n}from"./app-Cg1ooxyK.js";const r={},c=n('<p>Shell 编程在我们的日常开发工作中非常实用，目前 Linux 系统下最流行的运维自动化语言就是 Shell 和 Python 了。</p><p>这篇文章我会简单总结一下 Shell 编程基础知识，带你入门 Shell 编程！</p><h2 id="走进-shell-编程的大门" tabindex="-1"><a class="header-anchor" href="#走进-shell-编程的大门"><span>走进 Shell 编程的大门</span></a></h2><h3 id="为什么要学-shell" tabindex="-1"><a class="header-anchor" href="#为什么要学-shell"><span>为什么要学 Shell？</span></a></h3><p>学一个东西，我们大部分情况都是往实用性方向着想。从工作角度来讲，学习 Shell 是为了提高我们自己工作效率，提高产出，让我们在更少的时间完成更多的事情。</p><p>很多人会说 Shell 编程属于运维方面的知识了，应该是运维人员来做，我们做后端开发的没必要学。我觉得这种说法大错特错，相比于专门做 Linux 运维的人员来说，我们对 Shell 编程掌握程度的要求要比他们低，但是 Shell 编程也是我们必须要掌握的！</p><p>目前 Linux 系统下最流行的运维自动化语言就是 Shell 和 Python 了。</p><p>两者之间，Shell 几乎是 IT 企业必须使用的运维自动化编程语言，特别是在运维工作中的服务监控、业务快速部署、服务启动停止、数据备份及处理、日志分析等环节里，shell 是不可缺的。Python 更适合处理复杂的业务逻辑，以及开发复杂的运维软件工具，实现通过 web 访问等。Shell 是一个命令解释器，解释执行用户所输入的命令和程序。一输入命令，就立即回应的交互的对话方式。</p><p>另外，了解 shell 编程也是大部分互联网公司招聘后端开发人员的要求。下图是我截取的一些知名互联网公司对于 Shell 编程的要求。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/shell/60190220.jpg" alt="大型互联网公司对于shell编程技能的要求" tabindex="0"><figcaption>大型互联网公司对于shell编程技能的要求</figcaption></figure><h3 id="什么是-shell" tabindex="-1"><a class="header-anchor" href="#什么是-shell"><span>什么是 Shell？</span></a></h3><p>简单来说“Shell 编程就是对一堆 Linux 命令的逻辑化处理”。</p><p>W3Cschool 上的一篇文章是这样介绍 Shell 的，如下图所示。<br><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/shell/19456505.jpg" alt="什么是 Shell？"></p><h3 id="shell-编程的-hello-world" tabindex="-1"><a class="header-anchor" href="#shell-编程的-hello-world"><span>Shell 编程的 Hello World</span></a></h3><p>学习任何一门编程语言第一件事就是输出 HelloWorld 了！下面我会从新建文件到 shell 代码编写来说下 Shell 编程如何输出 Hello World。</p>',15),d={href:"http://helloworld.sh",target:"_blank",rel:"noopener noreferrer"},u=s("code",null,"touch helloworld.sh",-1),m=s("p",null,[a("(2) 使脚本具有执行权限："),s("code",null,"chmod +x helloworld.sh")],-1),h={href:"http://helloworld.sh",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"vim helloworld.sh",-1),b={href:"http://helloworld.sh",target:"_blank",rel:"noopener noreferrer"},g=n(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#第一个shell小程序,echo 是linux中的输出命令。</span>
<span class="token builtin class-name">echo</span>  <span class="token string">&quot;helloworld!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>shell 中 # 符号表示注释。<strong>shell 的第一行比较特殊，一般都会以#!开始来指定使用的 shell 类型。在 linux 中，除了 bash shell 以外，还有很多版本的 shell， 例如 zsh、dash 等等...不过 bash shell 还是我们使用最多的。</strong></p>`,2),k=s("code",null,"./helloworld.sh",-1),f=s("code",null,"./helloworld.sh",-1),x=s("code",null,"helloworld.sh",-1),w=s("code",null,"helloworld.sh",-1),S={href:"http://helloworld.sh",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"helloworld.sh",-1),q=s("code",null,"./helloworld.sh",-1),j=n(`<figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/shell/55296212.jpg" alt="shell 编程Hello World" tabindex="0"><figcaption>shell 编程Hello World</figcaption></figure><h2 id="shell-变量" tabindex="-1"><a class="header-anchor" href="#shell-变量"><span>Shell 变量</span></a></h2><h3 id="shell-编程中的变量介绍" tabindex="-1"><a class="header-anchor" href="#shell-编程中的变量介绍"><span>Shell 编程中的变量介绍</span></a></h3><p><strong>Shell 编程中一般分为三种变量：</strong></p><ol><li><strong>我们自己定义的变量（自定义变量）:</strong> 仅在当前 Shell 实例中有效，其他 Shell 启动的程序不能访问局部变量。</li><li><strong>Linux 已定义的环境变量</strong>（环境变量， 例如：<code>PATH</code>, ​<code>HOME</code> 等..., 这类变量我们可以直接使用），使用 <code>env</code> 命令可以查看所有的环境变量，而 set 命令既可以查看环境变量也可以查看自定义变量。</li><li><strong>Shell 变量</strong>：Shell 变量是由 Shell 程序设置的特殊变量。Shell 变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了 Shell 的正常运行</li></ol><p><strong>常用的环境变量:</strong></p><blockquote><p>PATH 决定了 shell 将到哪些目录中寻找命令或程序<br> HOME 当前用户主目录<br> HISTSIZE 　历史记录数<br> LOGNAME 当前用户的登录名<br> HOSTNAME 　指主机的名称<br> SHELL 当前用户 Shell 类型<br> LANGUAGE 　语言相关的环境变量，多语言可以修改此环境变量<br> MAIL 　当前用户的邮件存放目录<br> PS1 　基本提示符，对于 root 用户是#，对于普通用户是$</p></blockquote><p><strong>使用 Linux 已定义的环境变量：</strong></p><p>比如我们要看当前用户目录可以使用：<code>echo $HOME</code>命令；如果我们要看当前用户 Shell 类型 可以使用<code>echo $SHELL</code>命令。可以看出，使用方法非常简单。</p><p><strong>使用自己定义的变量：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#自定义变量hello</span>
<span class="token assign-left variable">hello</span><span class="token operator">=</span><span class="token string">&quot;hello world&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$hello</span>
<span class="token builtin class-name">echo</span>  <span class="token string">&quot;helloworld!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/shell/19835037.jpg" alt="使用自己定义的变量" tabindex="0"><figcaption>使用自己定义的变量</figcaption></figure><p><strong>Shell 编程中的变量名的命名的注意事项：</strong></p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头，但是可以使用下划线（_）开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用 bash 里的关键字（可用 help 命令查看保留关键字）。</li></ul><h3 id="shell-字符串入门" tabindex="-1"><a class="header-anchor" href="#shell-字符串入门"><span>Shell 字符串入门</span></a></h3><p>字符串是 shell 编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号。这点和 Java 中有所不同。</p>`,16),_={class:"MathJax",jax:"SVG",style:{position:"relative"}},$={style:{"vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"46.493ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 20550 950","aria-hidden":"true"},T=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">和</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">反</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">引</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">号</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">都</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">没</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">有</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">特</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">殊</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">含</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">义</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11000,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">在</text></g><g data-mml-node="mi" transform="translate(13000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">双</text></g><g data-mml-node="mi" transform="translate(14000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">引</text></g><g data-mml-node="mi" transform="translate(15000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">号</text></g><g data-mml-node="mi" transform="translate(16000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">中</text></g><g data-mml-node="mi" transform="translate(17000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(18000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">除</text></g><g data-mml-node="mi" transform="translate(19000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">了</text></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(20000,0)"><g data-mml-node="mo"><g data-c="2033"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" transform="translate(275,0)"></path></g></g></g></g></g>',1),L=[T],z=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",{mathvariant:"normal"},"和"),s("mi",{mathvariant:"normal"},"反"),s("mi",{mathvariant:"normal"},"引"),s("mi",{mathvariant:"normal"},"号"),s("mi",{mathvariant:"normal"},"都"),s("mi",{mathvariant:"normal"},"没"),s("mi",{mathvariant:"normal"},"有"),s("mi",{mathvariant:"normal"},"特"),s("mi",{mathvariant:"normal"},"殊"),s("mi",{mathvariant:"normal"},"含"),s("mi",{mathvariant:"normal"},"义"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",null,"。")]),s("mi",{mathvariant:"normal"},"在"),s("mi",{mathvariant:"normal"},"双"),s("mi",{mathvariant:"normal"},"引"),s("mi",{mathvariant:"normal"},"号"),s("mi",{mathvariant:"normal"},"中"),s("mi",null,"，"),s("mi",{mathvariant:"normal"},"除"),s("mi",{mathvariant:"normal"},"了"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mo",{"data-mjx-pseudoscript":"true"},'"')])])],-1),H=s("code",null,"history expansion",-1),P=n(`<p><strong>单引号字符串：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&#39;SnailClimb&#39;</span>
<span class="token assign-left variable">hello</span><span class="token operator">=</span><span class="token string">&#39;Hello, I am $name!&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出内容：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>Hello, I am $name!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>双引号字符串：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&#39;SnailClimb&#39;</span>
<span class="token assign-left variable">hello</span><span class="token operator">=</span><span class="token string">&quot;Hello, I am <span class="token variable">$name</span>!&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$hello</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出内容：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>Hello, I am SnailClimb!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="shell-字符串常见操作" tabindex="-1"><a class="header-anchor" href="#shell-字符串常见操作"><span>Shell 字符串常见操作</span></a></h3><p><strong>拼接字符串：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;SnailClimb&quot;</span>
<span class="token comment"># 使用双引号拼接</span>
<span class="token assign-left variable">greeting</span><span class="token operator">=</span><span class="token string">&quot;hello, &quot;</span><span class="token variable">$name</span><span class="token string">&quot; !&quot;</span>
<span class="token assign-left variable">greeting_1</span><span class="token operator">=</span><span class="token string">&quot;hello, <span class="token variable">\${name}</span> !&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$greeting</span>  <span class="token variable">$greeting_1</span>
<span class="token comment"># 使用单引号拼接</span>
<span class="token assign-left variable">greeting_2</span><span class="token operator">=</span><span class="token string">&#39;hello, &#39;</span><span class="token variable">$name</span><span class="token string">&#39; !&#39;</span>
<span class="token assign-left variable">greeting_3</span><span class="token operator">=</span><span class="token string">&#39;hello, \${name} !&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$greeting_2</span>  <span class="token variable">$greeting_3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/shell/51148933.jpg" alt="输出结果" tabindex="0"><figcaption>输出结果</figcaption></figure><p><strong>获取字符串长度：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#获取字符串长度</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;SnailClimb&quot;</span>
<span class="token comment"># 第一种方式</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${<span class="token operator">#</span>name}</span> <span class="token comment">#输出 10</span>
<span class="token comment"># 第二种方式</span>
<span class="token function">expr</span> length <span class="token string">&quot;<span class="token variable">$name</span>&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果:</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>10
10
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 expr 命令时，表达式中的运算符左右必须包含空格，如果不包含空格，将会输出表达式本身:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">expr</span> <span class="token number">5</span>+6    // 直接输出 <span class="token number">5</span>+6
<span class="token function">expr</span> <span class="token number">5</span> + <span class="token number">6</span>       // 输出 <span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于某些运算符，还需要我们使用符号<code>\\</code>进行转义，否则就会提示语法错误。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">expr</span> <span class="token number">5</span> * <span class="token number">6</span>       // 输出错误
<span class="token function">expr</span> <span class="token number">5</span> <span class="token punctuation">\\</span>* <span class="token number">6</span>      // 输出30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>截取子字符串:</strong></p><p>简单的字符串截取：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#从字符串第 1 个字符开始往后截取 10 个字符</span>
<span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">&quot;SnailClimb is a great man&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${str<span class="token operator">:</span>0<span class="token operator">:</span>10}</span> <span class="token comment">#输出:SnailClimb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据表达式截取：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment">#!bin/bash</span>
<span class="token comment">#author:amau</span>

<span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token string">&quot;https://www.runoob.com/linux/linux-shell-variable.html&quot;</span>
<span class="token comment"># %表示删除从后匹配, 最短结果</span>
<span class="token comment"># %%表示删除从后匹配, 最长匹配结果</span>
<span class="token comment"># #表示删除从头匹配, 最短结果</span>
<span class="token comment"># ##表示删除从头匹配, 最长匹配结果</span>
<span class="token comment"># 注: *为通配符, 意为匹配任意数量的任意字符</span>
<span class="token assign-left variable">s1</span><span class="token operator">=</span><span class="token variable">\${var<span class="token operator">%%</span>t*}</span> <span class="token comment">#h</span>
<span class="token assign-left variable">s2</span><span class="token operator">=</span><span class="token variable">\${var<span class="token operator">%</span>t*}</span>  <span class="token comment">#https://www.runoob.com/linux/linux-shell-variable.h</span>
<span class="token assign-left variable">s3</span><span class="token operator">=</span><span class="token variable">\${var<span class="token operator">%%</span>.*}</span> <span class="token comment">#https://www</span>
<span class="token assign-left variable">s4</span><span class="token operator">=</span><span class="token variable">\${var<span class="token operator">#</span>*<span class="token operator">/</span>}</span>  <span class="token comment">#/www.runoob.com/linux/linux-shell-variable.html</span>
<span class="token assign-left variable">s5</span><span class="token operator">=</span><span class="token variable">\${var<span class="token operator">##</span>*<span class="token operator">/</span>}</span> <span class="token comment">#linux-shell-variable.html</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shell-数组" tabindex="-1"><a class="header-anchor" href="#shell-数组"><span>Shell 数组</span></a></h3><p>bash 支持一维数组（不支持多维数组），并且没有限定数组的大小。我下面给了大家一个关于数组操作的 Shell 代码示例，通过该示例大家可以知道如何创建数组、获取数组长度、获取/删除特定位置的数组元素、删除整个数组以及遍历数组。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment"># 获取数组长度</span>
<span class="token assign-left variable">length</span><span class="token operator">=</span><span class="token variable">\${<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>
<span class="token comment"># 或者</span>
<span class="token assign-left variable">length2</span><span class="token operator">=</span><span class="token variable">\${<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>
<span class="token comment">#输出数组长度</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$length</span> <span class="token comment">#输出：5</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$length2</span> <span class="token comment">#输出：5</span>
<span class="token comment"># 输出数组第三个元素</span>
<span class="token builtin class-name">echo</span> <span class="token variable">\${array<span class="token punctuation">[</span>2<span class="token punctuation">]</span>}</span> <span class="token comment">#输出：3</span>
<span class="token builtin class-name">unset</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment"># 删除下标为1的元素也就是删除第二个元素</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">\${array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token variable">$i</span> <span class="token punctuation">;</span><span class="token keyword">done</span> <span class="token comment"># 遍历数组，输出：1 3 4 5</span>
<span class="token builtin class-name">unset</span> array<span class="token punctuation">;</span> <span class="token comment"># 删除数组中的所有元素</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">\${array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token variable">$i</span> <span class="token punctuation">;</span><span class="token keyword">done</span> <span class="token comment"># 遍历数组，数组元素为空，没有任何输出内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shell-基本运算符" tabindex="-1"><a class="header-anchor" href="#shell-基本运算符"><span>Shell 基本运算符</span></a></h2><blockquote><p>说明：图片来自《菜鸟教程》</p></blockquote><p>Shell 编程支持下面几种运算符</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><h3 id="算数运算符" tabindex="-1"><a class="header-anchor" href="#算数运算符"><span>算数运算符</span></a></h3><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/shell/4937342.jpg" alt="算数运算符" tabindex="0"><figcaption>算数运算符</figcaption></figure><p>我以加法运算符做一个简单的示例（注意：不是单引号，是反引号）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> $a + $b<span class="token variable">\`</span></span>
<span class="token comment">#输出：Total value : 6</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Total value : <span class="token variable">$val</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/shell/64391380.jpg" alt="shell关系运算符" tabindex="0"><figcaption>shell关系运算符</figcaption></figure><p>通过一个简单的示例演示关系运算符的使用，下面 shell 程序的作用是当 score=100 的时候输出 A 否则输出 B。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">score</span><span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">;</span>
<span class="token assign-left variable">maxscore</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$score</span> <span class="token parameter variable">-eq</span> <span class="token variable">$maxscore</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;A&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;B&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>B
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/shell/60545848.jpg" alt="逻辑运算符" tabindex="0"><figcaption>逻辑运算符</figcaption></figure><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token variable">))</span></span>
<span class="token comment"># 输出：0；逻辑与运算只有相与的两边都是1，与的结果才是1；否则与的结果是0</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔运算符" tabindex="-1"><a class="header-anchor" href="#布尔运算符"><span>布尔运算符</span></a></h3><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/shell/93961425.jpg" alt="布尔运算符" tabindex="0"><figcaption>布尔运算符</figcaption></figure><p>这里就不做演示了，应该挺简单的。</p><h3 id="字符串运算符" tabindex="-1"><a class="header-anchor" href="#字符串运算符"><span>字符串运算符</span></a></h3><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/shell/309094.jpg" alt=" 字符串运算符" tabindex="0"><figcaption> 字符串运算符</figcaption></figure><p>简单示例：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token string">&quot;efg&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 等于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 不等于 b&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>a 不等于 b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="文件相关运算符" tabindex="-1"><a class="header-anchor" href="#文件相关运算符"><span>文件相关运算符</span></a></h3><figure><img src="https://oss.javaguide.cn/github/javaguide/cs-basics/shell/60359774.jpg" alt="文件相关运算符" tabindex="0"><figcaption>文件相关运算符</figcaption></figure><p>使用方式很简单，比如我们定义好了一个文件路径<code>file=&quot;/usr/learnshell/test.sh&quot;</code> 如果我们想判断这个文件是否可读，可以这样<code>if [ -r $file ]</code> 如果想判断这个文件是否可写，可以这样<code>-w $file</code>，是不是很简单。</p><h2 id="shell-流程控制" tabindex="-1"><a class="header-anchor" href="#shell-流程控制"><span>Shell 流程控制</span></a></h2><h3 id="if-条件语句" tabindex="-1"><a class="header-anchor" href="#if-条件语句"><span>if 条件语句</span></a></h3><p>简单的 if else-if else 的条件语句示例</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 等于 b&quot;</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 大于 b&quot;</span>
<span class="token keyword">else</span>
   <span class="token builtin class-name">echo</span> <span class="token string">&quot;a 小于 b&quot;</span>
<span class="token keyword">fi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>a 小于 b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相信大家通过上面的示例就已经掌握了 shell 编程中的 if 条件语句。不过，还要提到的一点是，不同于我们常见的 Java 以及 PHP 中的 if 条件语句，shell if 条件语句中不能包含空语句也就是什么都不做的语句。</p><h3 id="for-循环语句" tabindex="-1"><a class="header-anchor" href="#for-循环语句"><span>for 循环语句</span></a></h3><p>通过下面三个简单的示例认识 for 循环语句最基本的使用，实际上 for 循环语句的功能比下面你看到的示例展现的要大得多。</p><p><strong>输出当前列表中的数据：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">for</span> <span class="token for-or-select variable">loop</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;The value is: <span class="token variable">$loop</span>&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>产生 10 个随机数：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">do</span>
   <span class="token builtin class-name">echo</span> <span class="token environment constant">$RANDOM</span><span class="token punctuation">;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出 1 到 5:</strong></p><p>通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要,下面来看一个例子：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">length</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span><span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token punctuation">;</span>
<span class="token keyword">done</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-语句" tabindex="-1"><a class="header-anchor" href="#while-语句"><span>while 语句</span></a></h3><p><strong>基本的 while 循环语句：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">int</span><span class="token operator">=</span><span class="token number">1</span>
<span class="token keyword">while</span><span class="token variable"><span class="token punctuation">((</span> $int<span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token variable">$int</span>
    <span class="token builtin class-name">let</span> <span class="token string">&quot;int++&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>while 循环可用于读取键盘信息：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;按下 &lt;CTRL-D&gt; 退出&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;输入你最喜欢的电影: &#39;</span>
<span class="token keyword">while</span> <span class="token builtin class-name">read</span> FILM
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;是的！<span class="token variable">$FILM</span> 是一个好电影&quot;</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出内容:</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>按下 &lt;CTRL-D&gt; 退出
输入你最喜欢的电影: 变形金刚
是的！变形金刚 是一个好电影
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>无限循环：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token keyword">while</span> <span class="token boolean">true</span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">command</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shell-函数" tabindex="-1"><a class="header-anchor" href="#shell-函数"><span>Shell 函数</span></a></h2><h3 id="不带参数没有返回值的函数" tabindex="-1"><a class="header-anchor" href="#不带参数没有返回值的函数"><span>不带参数没有返回值的函数</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token function-name function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;这是我的第一个 shell 函数!&quot;</span>
<span class="token punctuation">}</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;-----函数开始执行-----&quot;</span>
hello
<span class="token builtin class-name">echo</span> <span class="token string">&quot;-----函数执行完毕-----&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>-----函数开始执行-----
这是我的第一个 shell 函数!
-----函数执行完毕-----
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="有返回值的函数" tabindex="-1"><a class="header-anchor" href="#有返回值的函数"><span>有返回值的函数</span></a></h3><p><strong>输入两个数字之后相加并返回结果：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token function-name function">funWithReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;输入第一个数字: &quot;</span>
    <span class="token builtin class-name">read</span> aNum
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;输入第二个数字: &quot;</span>
    <span class="token builtin class-name">read</span> anotherNum
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;两个数字分别为 <span class="token variable">$aNum</span> 和 <span class="token variable">$anotherNum</span> !&quot;</span>
    <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">$((</span>$aNum<span class="token operator">+</span>$anotherNum<span class="token variable">))</span></span>
<span class="token punctuation">}</span>
funWithReturn
<span class="token builtin class-name">echo</span> <span class="token string">&quot;输入的两个数字之和为 <span class="token variable">$?</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>输入第一个数字:
1
输入第二个数字:
2
两个数字分别为 1 和 2 !
输入的两个数字之和为 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="带参数的函数" tabindex="-1"><a class="header-anchor" href="#带参数的函数"><span>带参数的函数</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token function-name function">funWithParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第一个参数为 <span class="token variable">$1</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第二个参数为 <span class="token variable">$2</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十个参数为 <span class="token variable">$10</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十个参数为 <span class="token variable">\${10}</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;第十一个参数为 <span class="token variable">\${11}</span> !&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;参数总数有 <span class="token variable">$#</span> 个!&quot;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;作为一个字符串输出所有参数 <span class="token variable">$*</span> !&quot;</span>
<span class="token punctuation">}</span>
funWithParam <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">34</span> <span class="token number">73</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-plain line-numbers-mode" data-ext="plain" data-title="plain"><pre class="language-plain"><code>第一个参数为 1 !
第二个参数为 2 !
第十个参数为 10 !
第十个参数为 34 !
第十一个参数为 73 !
参数总数有 11 个!
作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,99);function M(N,A){const e=p("ExternalLinkIcon");return t(),i("div",null,[c,s("p",null,[a("(1)新建一个文件 "),s("a",d,[a("helloworld.sh"),l(e)]),a(" :"),u,a("，扩展名为 sh（sh 代表 Shell）（扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了）")]),m,s("p",null,[a("(3) 使用 vim 命令修改 "),s("a",h,[a("helloworld.sh"),l(e)]),a(" 文件："),v,a("(vim 文件------>进入文件----->命令模式------>按 i 进入编辑模式----->编辑文件 ------->按 Esc 进入底行模式----->输入:wq/q! （输入 wq 代表写入内容并退出，即保存；输入 q!代表强制退出不保存。）)")]),s("p",null,[s("a",b,[a("helloworld.sh"),l(e)]),a(" 内容如下：")]),g,s("p",null,[a("(4) 运行脚本:"),k,a(" 。（注意，一定要写成 "),f,a(" ，而不是 "),x,a(" ，运行其它二进制的程序也一样，直接写 "),w,a(" ，linux 系统会去 PATH 里寻找有没有叫 "),s("a",S,[a("helloworld.sh"),l(e)]),a(" 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 "),y,a(" 是会找不到命令的，要用"),q,a(" 告诉系统说，就在当前目录找。）")]),j,s("p",null,[a("在单引号中所有的特殊符号，如"),s("mjx-container",_,[(t(),i("svg",$,L)),z]),a('"、"\\"、反引号和感叹号（需开启 '),H,a("），其他的字符没有特殊含义。")]),P])}const I=o(r,[["render",M],["__file","shell-intro.html.vue"]]),Q=JSON.parse('{"path":"/cs-basics/operating-system/shell-intro.html","title":"Shell 编程基础知识总结","lang":"zh-CN","frontmatter":{"title":"Shell 编程基础知识总结","category":"计算机基础","tag":["操作系统","Linux"],"head":[["meta",{"name":"description","content":"Shell 编程在我们的日常开发工作中非常实用，目前 Linux 系统下最流行的运维自动化语言就是 Shell 和 Python 了。这篇文章我会简单总结一下 Shell 编程基础知识，带你入门 Shell 编程！"}],["meta",{"property":"og:url","content":"https://snailcoding.cn/cs-basics/operating-system/shell-intro.html"}],["meta",{"property":"og:site_name","content":"蜗牛のJava宝典"}],["meta",{"property":"og:title","content":"Shell 编程基础知识总结"}],["meta",{"property":"og:description","content":"Shell 编程在我们的日常开发工作中非常实用，目前 Linux 系统下最流行的运维自动化语言就是 Shell 和 Python 了。 这篇文章我会简单总结一下 Shell 编程基础知识，带你入门 Shell 编程！ 走进 Shell 编程的大门 为什么要学 Shell？ 学一个东西，我们大部分情况都是往实用性方向着想。从工作角度来讲，学习 Shell..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/60190220.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Shell 编程基础知识总结"}],["meta",{"property":"article:author","content":"Mr.Xu"}],["meta",{"property":"article:tag","content":"操作系统"}],["meta",{"property":"article:tag","content":"Linux"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Shell 编程基础知识总结\\",\\"image\\":[\\"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/60190220.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/19456505.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/55296212.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/19835037.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/51148933.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/4937342.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/64391380.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/60545848.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/93961425.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/309094.jpg\\",\\"https://oss.javaguide.cn/github/javaguide/cs-basics/shell/60359774.jpg\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Xu\\",\\"url\\":\\"https://snailcoding.cn\\"}]}"]],"description":"Shell 编程在我们的日常开发工作中非常实用，目前 Linux 系统下最流行的运维自动化语言就是 Shell 和 Python 了。 这篇文章我会简单总结一下 Shell 编程基础知识，带你入门 Shell 编程！ 走进 Shell 编程的大门 为什么要学 Shell？ 学一个东西，我们大部分情况都是往实用性方向着想。从工作角度来讲，学习 Shell..."},"headers":[{"level":2,"title":"走进 Shell 编程的大门","slug":"走进-shell-编程的大门","link":"#走进-shell-编程的大门","children":[{"level":3,"title":"为什么要学 Shell？","slug":"为什么要学-shell","link":"#为什么要学-shell","children":[]},{"level":3,"title":"什么是 Shell？","slug":"什么是-shell","link":"#什么是-shell","children":[]},{"level":3,"title":"Shell 编程的 Hello World","slug":"shell-编程的-hello-world","link":"#shell-编程的-hello-world","children":[]}]},{"level":2,"title":"Shell 变量","slug":"shell-变量","link":"#shell-变量","children":[{"level":3,"title":"Shell 编程中的变量介绍","slug":"shell-编程中的变量介绍","link":"#shell-编程中的变量介绍","children":[]},{"level":3,"title":"Shell 字符串入门","slug":"shell-字符串入门","link":"#shell-字符串入门","children":[]},{"level":3,"title":"Shell 字符串常见操作","slug":"shell-字符串常见操作","link":"#shell-字符串常见操作","children":[]},{"level":3,"title":"Shell 数组","slug":"shell-数组","link":"#shell-数组","children":[]}]},{"level":2,"title":"Shell 基本运算符","slug":"shell-基本运算符","link":"#shell-基本运算符","children":[{"level":3,"title":"算数运算符","slug":"算数运算符","link":"#算数运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"布尔运算符","slug":"布尔运算符","link":"#布尔运算符","children":[]},{"level":3,"title":"字符串运算符","slug":"字符串运算符","link":"#字符串运算符","children":[]},{"level":3,"title":"文件相关运算符","slug":"文件相关运算符","link":"#文件相关运算符","children":[]}]},{"level":2,"title":"Shell 流程控制","slug":"shell-流程控制","link":"#shell-流程控制","children":[{"level":3,"title":"if 条件语句","slug":"if-条件语句","link":"#if-条件语句","children":[]},{"level":3,"title":"for 循环语句","slug":"for-循环语句","link":"#for-循环语句","children":[]},{"level":3,"title":"while 语句","slug":"while-语句","link":"#while-语句","children":[]}]},{"level":2,"title":"Shell 函数","slug":"shell-函数","link":"#shell-函数","children":[{"level":3,"title":"不带参数没有返回值的函数","slug":"不带参数没有返回值的函数","link":"#不带参数没有返回值的函数","children":[]},{"level":3,"title":"有返回值的函数","slug":"有返回值的函数","link":"#有返回值的函数","children":[]},{"level":3,"title":"带参数的函数","slug":"带参数的函数","link":"#带参数的函数","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":11.64,"words":3492},"filePathRelative":"cs-basics/operating-system/shell-intro.md","excerpt":"<p>Shell 编程在我们的日常开发工作中非常实用，目前 Linux 系统下最流行的运维自动化语言就是 Shell 和 Python 了。</p>\\n<p>这篇文章我会简单总结一下 Shell 编程基础知识，带你入门 Shell 编程！</p>\\n<h2>走进 Shell 编程的大门</h2>\\n<h3>为什么要学 Shell？</h3>\\n<p>学一个东西，我们大部分情况都是往实用性方向着想。从工作角度来讲，学习 Shell 是为了提高我们自己工作效率，提高产出，让我们在更少的时间完成更多的事情。</p>\\n<p>很多人会说 Shell 编程属于运维方面的知识了，应该是运维人员来做，我们做后端开发的没必要学。我觉得这种说法大错特错，相比于专门做 Linux 运维的人员来说，我们对 Shell 编程掌握程度的要求要比他们低，但是 Shell 编程也是我们必须要掌握的！</p>","autoDesc":true}');export{I as comp,Q as data};
