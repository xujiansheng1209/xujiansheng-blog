import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as l,c as o,a as e,d as a,b as i,e as t}from"./app-Cg1ooxyK.js";const c={},d=t(`<h1 id="如何部署项目" tabindex="-1"><a class="header-anchor" href="#如何部署项目"><span>如何部署项目</span></a></h1><h2 id="自动化部署" tabindex="-1"><a class="header-anchor" href="#自动化部署"><span>自动化部署</span></a></h2><p>比如git提供的自动构建部署功能，只要代码有推送，就会自动进行部署</p><h2 id="手动部署" tabindex="-1"><a class="header-anchor" href="#手动部署"><span>手动部署</span></a></h2><p>基于springboot项目的手动部署，springboot内嵌tomcat,无需再去装tomcat，只要打成jar包就行</p><ul><li><p>将目标服务打成jar包</p></li><li><p>找到目标服务器上之前部署的jar包</p></li><li><p>将之前的jar包进行备份</p></li><li><p>将新的jar替换成旧的jar包</p></li><li><p>重启该服务，查看该服务是否重启成功</p></li></ul><p>最简单的启动方式 ：java -jar [jar包名]</p><p>注意要在jar包部署的目录下面使用该命令。不在该目录下面要使用绝对路径或者相对路径+[jar包名]</p><p>启动脚本的示例：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>#!/usr/bin/bash

if [ \`ps -ef | grep &#39;zcloud-article.jar&#39; | grep &#39;java -jar&#39; | wc -l\` != 0 ]
then
    echo &quot;The zcloud-article server is already in running mode.&quot;
    exit 0
fi

nohup java  -Dlogging.config=classpath:logback/logback-prd.xml  -jar -Xms512m -Xmx1024m -XX:MetaspaceSize=512M -XX:SurvivorRatio=8 -XX:-UseAdaptiveSizePolicy  /opt/zcloud/applications/zcloud-study-platform-backend/zcloud-article.jar --spring.cloud.nacos.config.server-addr=http://124.222.249.225:8848 --spring.cloud.nacos.config.file-extension=yml --spring.cloud.nacos.config.namespace=d0012ed9-43eb-44c3-9064-fd540a980361 --spring.cloud.nacos.config.group=DEFAULT_GROUP --spring.profiles.active=dev --spring.cloud.nacos.discovery.group=DEFAULT_GROUP  --spring.cloud.nacos.config.username=nacos --spring.cloud.nacos.config.password=zcloud666  --spring.cloud.nacos.discovery.username=nacos --spring.cloud.nacos.discovery.password=zcloud666 &gt; /opt/zcloud/log/zcloud-study-platform-backend/zcloud-article.out 2&gt;&amp;1 &amp;

echo &quot;zcloud-article server has started.&quot;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),p={href:"http://article.sh",target:"_blank",rel:"noopener noreferrer"},u={href:"http://article.sh",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>jvm虚拟机设置的含义：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>
    -Xms512m：设置JVM初始堆内存大小为512MB。
    -Xmx1024m：设置JVM最大堆内存大小为1024MB。
    -XX:MetaspaceSize=512M：设置元空间（Metaspace）初始大小为512MB。元空间主要用于存储类的元数据信息，如类的结构、方法等。
    -XX:SurvivorRatio=8：设置新生代中Eden区与Survivor区的大小比例为8:1。这有助于在对象晋升到老年代时更好地进行内存分配和回收。
    -XX:-UseAdaptiveSizePolicy：禁用自适应的垃圾回收策略。这意味着JVM将使用固定的堆内存大小，而不是根据程序的实际需求动态调整堆内存大小。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>杀死服务可以使用 kill -9 [服务pid进程] 服务进程PID可以直接使用jps查看，或者使用ps -ef|grep [服务名] 来查看</p>`,3);function v(g,h){const n=s("ExternalLinkIcon");return l(),o("div",null,[d,e("p",null,[e("a",p,[a("article.sh"),i(n)])]),e("p",null,[a("sh "),e("a",u,[a("article.sh"),i(n)])]),m])}const f=r(c,[["render",v],["__file","如何部署项目.html.vue"]]),_=JSON.parse('{"path":"/java-essentials/%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE.html","title":"如何部署项目","lang":"zh-CN","frontmatter":{"description":"如何部署项目 自动化部署 比如git提供的自动构建部署功能，只要代码有推送，就会自动进行部署 手动部署 基于springboot项目的手动部署，springboot内嵌tomcat,无需再去装tomcat，只要打成jar包就行 将目标服务打成jar包 找到目标服务器上之前部署的jar包 将之前的jar包进行备份 将新的jar替换成旧的jar包 重启该服...","head":[["meta",{"property":"og:url","content":"https://snailcoding.cn/java-essentials/%E5%A6%82%E4%BD%95%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE.html"}],["meta",{"property":"og:site_name","content":"蜗牛のJava宝典"}],["meta",{"property":"og:title","content":"如何部署项目"}],["meta",{"property":"og:description","content":"如何部署项目 自动化部署 比如git提供的自动构建部署功能，只要代码有推送，就会自动进行部署 手动部署 基于springboot项目的手动部署，springboot内嵌tomcat,无需再去装tomcat，只要打成jar包就行 将目标服务打成jar包 找到目标服务器上之前部署的jar包 将之前的jar包进行备份 将新的jar替换成旧的jar包 重启该服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Xu"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何部署项目\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Xu\\",\\"url\\":\\"https://snailcoding.cn\\"}]}"]]},"headers":[{"level":2,"title":"自动化部署","slug":"自动化部署","link":"#自动化部署","children":[]},{"level":2,"title":"手动部署","slug":"手动部署","link":"#手动部署","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.67,"words":502},"filePathRelative":"java-essentials/如何部署项目.md","excerpt":"\\n<h2>自动化部署</h2>\\n<p>比如git提供的自动构建部署功能，只要代码有推送，就会自动进行部署</p>\\n<h2>手动部署</h2>\\n<p>基于springboot项目的手动部署，springboot内嵌tomcat,无需再去装tomcat，只要打成jar包就行</p>\\n<ul>\\n<li>\\n<p>将目标服务打成jar包</p>\\n</li>\\n<li>\\n<p>找到目标服务器上之前部署的jar包</p>\\n</li>\\n<li>\\n<p>将之前的jar包进行备份</p>\\n</li>\\n<li>\\n<p>将新的jar替换成旧的jar包</p>\\n</li>\\n<li>\\n<p>重启该服务，查看该服务是否重启成功</p>\\n</li>\\n</ul>","autoDesc":true}');export{f as comp,_ as data};
