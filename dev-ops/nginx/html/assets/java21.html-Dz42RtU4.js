import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as u,a as n,d as s,b as a,w as o,e as t}from"./app-Cg1ooxyK.js";const r={},k=n("p",null,"JDK 21 于 2023 年 9 月 19 日 发布，这是一个非常重要的版本，里程碑式。",-1),d=n("p",null,"JDK21 是 LTS（长期支持版），至此为止，目前有 JDK8、JDK11、JDK17 和 JDK21 这四个长期支持版了。",-1),m=n("p",null,"JDK 21 共有 15 个新特性，这篇文章会挑选其中较为重要的一些新特性进行详细介绍：",-1),v={href:"https://openjdk.org/jeps/430",target:"_blank",rel:"noopener noreferrer"},g={href:"https://openjdk.org/jeps/431",target:"_blank",rel:"noopener noreferrer"},b={href:"https://openjdk.org/jeps/439",target:"_blank",rel:"noopener noreferrer"},h={href:"https://openjdk.org/jeps/440",target:"_blank",rel:"noopener noreferrer"},j={href:"https://openjdk.org/jeps/442",target:"_blank",rel:"noopener noreferrer"},f={href:"https://openjdk.org/jeps/442",target:"_blank",rel:"noopener noreferrer"},_={href:"https://openjdk.org/jeps/443",target:"_blank",rel:"noopener noreferrer"},S={href:"https://openjdk.org/jeps/444",target:"_blank",rel:"noopener noreferrer"},J={href:"https://openjdk.org/jeps/445",target:"_blank",rel:"noopener noreferrer"},q=t(`<h2 id="jep-430-字符串模板-预览" tabindex="-1"><a class="header-anchor" href="#jep-430-字符串模板-预览"><span>JEP 430：字符串模板（预览）</span></a></h2><p>String Templates(字符串模板) 目前仍然是 JDK 21 中的一个预览功能。</p><p>String Templates 提供了一种更简洁、更直观的方式来动态构建字符串。通过使用占位符<code>\${}</code>，我们可以将变量的值直接嵌入到字符串中，而不需要手动处理。在运行时，Java 编译器会将这些占位符替换为实际的变量值。并且，表达式支持局部变量、静态/非静态字段甚至方法、计算结果等特性。</p><p>实际上，String Templates（字符串模板）再大多数编程语言中都存在:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token string">&quot;Greetings {{ name }}!&quot;</span><span class="token punctuation">;</span>  <span class="token comment">//Angular</span>
<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Greetings </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> name <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>    <span class="token comment">//Typescript</span>
$<span class="token string">&quot;Greetings { name }!&quot;</span>    <span class="token comment">//Visual basic</span>
f<span class="token string">&quot;Greetings { name }!&quot;</span>    <span class="token comment">//Python</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 在没有 String Templates 之前，我们通常使用字符串拼接或格式化方法来构建字符串：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//concatenation</span>
message <span class="token operator">=</span> <span class="token string">&quot;Greetings &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//String.format()</span>
message <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Greetings %s!&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//concatenation</span>

<span class="token comment">//MessageFormat</span>
message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">(</span><span class="token string">&quot;Greetings {0}!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//StringBuilder</span>
message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;Greetings &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些方法或多或少都存在一些缺点，比如难以阅读、冗长、复杂。</p><p>Java 使用 String Templates 进行字符串拼接，可以直接在字符串中嵌入表达式，而无需进行额外的处理：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;Greetings \\{name}!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的模板表达式中：</p><ul><li>STR 是模板处理器。</li><li><code>\\{name}</code>为表达式，运行时，这些表达式将被相应的变量值替换。</li></ul><p>Java 目前支持三种模板处理器：</p><ul><li>STR：自动执行字符串插值，即将模板中的每个嵌入式表达式替换为其值（转换为字符串）。</li><li>FMT：和 STR 类似，但是它还可以接受格式说明符，这些格式说明符出现在嵌入式表达式的左边，用来控制输出的样式</li><li>RAW：不会像 STR 和 FMT 模板处理器那样自动处理字符串模板，而是返回一个 <code>StringTemplate</code> 对象，这个对象包含了模板中的文本和表达式的信息</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Lokesh&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//STR</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;Greetings \\{name}.&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//FMT</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;Greetings %-12s\\{name}.&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//RAW</span>
<span class="token class-name">StringTemplate</span> st <span class="token operator">=</span> <span class="token constant">RAW</span><span class="token punctuation">.</span><span class="token string">&quot;Greetings \\{name}.&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了 JDK 自带的三种模板处理器外，你还可以实现 <code>StringTemplate.Processor</code> 接口来创建自己的模板处理器。</p><p>我们可以使用局部变量、静态/非静态字段甚至方法作为嵌入表达式：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//variable</span>
message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;Greetings \\{name}!&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//method</span>
message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;Greetings \\{getName()}!&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//field</span>
message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;Greetings \\{this.name}!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以在表达式中执行计算并打印结果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;\\{x} + \\{y} = \\{x + y}&quot;</span><span class="token punctuation">;</span>  <span class="token comment">//&quot;10 + 20 = 30&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了提高可读性，我们可以将嵌入的表达式分成多行:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>&quot;<span class="token class-name">The</span> current time is \\<span class="token punctuation">{</span>
    <span class="token comment">//sample comment - current time in HH:mm:ss</span>
    <span class="token class-name">DateTimeFormatter</span>
      <span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;HH:mm:ss&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">.</span>&quot;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jep431-序列化集合" tabindex="-1"><a class="header-anchor" href="#jep431-序列化集合"><span>JEP431：序列化集合</span></a></h2><p>JDK 21 引入了一种新的集合类型：<strong>Sequenced Collections（序列化集合，也叫有序集合）</strong>，这是一种具有确定出现顺序（encounter order）的集合（无论我们遍历这样的集合多少次，元素的出现顺序始终是固定的）。序列化集合提供了处理集合的第一个和最后一个元素以及反向视图（与原始集合相反的顺序）的简单方法。</p><p>Sequenced Collections 包括以下三个接口：</p>`,25),y={href:"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedCollection.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"SequencedCollection",-1),E={href:"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedSet.html",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"SequencedSet",-1),T={href:"https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/SequencedMap.html",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"SequencedMap",-1),K=t(`<p><code>SequencedCollection</code> 接口继承了 <code>Collection</code>接口， 提供了在集合两端访问、添加或删除元素以及获取集合的反向视图的方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token comment">// New Method</span>

  <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Promoted methods from Deque&lt;E&gt;</span>

  <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">E</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">E</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>List</code> 和 <code>Deque</code> 接口实现了<code>SequencedCollection</code> 接口。</p><p>这里以 <code>ArrayList</code> 为例，演示一下实际使用效果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// List contains: [1]</span>

arrayList<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// List contains: [0, 1]</span>
arrayList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// List contains: [0, 1, 2]</span>

<span class="token class-name">Integer</span> firstElement <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 0</span>
<span class="token class-name">Integer</span> lastElement <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> reversed <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reversed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints [2, 1, 0]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SequencedSet</code>接口直接继承了 <code>SequencedCollection</code> 接口并重写了 <code>reversed()</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SortedSet</code> 和 <code>LinkedHashSet</code> 实现了<code>SequencedSet</code>接口。</p><p>这里以 <code>LinkedHashSet</code> 为例，演示一下实际使用效果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> linkedHashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Integer</span> firstElement <span class="token operator">=</span> linkedHashSet<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 1</span>
<span class="token class-name">Integer</span> lastElement <span class="token operator">=</span> linkedHashSet<span class="token punctuation">.</span><span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3</span>

linkedHashSet<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//List contains: [0, 1, 2, 3]</span>
linkedHashSet<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//List contains: [0, 1, 2, 3, 4]</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedHashSet<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//Prints [5, 3, 2, 1, 0]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SequencedMap</code> 接口继承了 <code>Map</code>接口， 提供了在集合两端访问、添加或删除键值对、获取包含 key 的 <code>SequencedSet</code>、包含 value 的 <code>SequencedCollection</code>、包含 entry（键值对） 的 <code>SequencedSet</code>以及获取集合的反向视图的方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">SequencedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

  <span class="token comment">// New Methods</span>

  <span class="token class-name">SequencedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">sequencedKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">SequencedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">sequencedValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">SequencedSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">sequencedEntrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">V</span> <span class="token function">putFirst</span><span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">V</span> <span class="token function">putLast</span><span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token comment">// Promoted Methods from NavigableMap&lt;K, V&gt;</span>

  <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">firstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">lastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">pollFirstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">pollLastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SortedMap</code> 和<code>LinkedHashMap</code> 实现了<code>SequencedMap</code> 接口。</p><p>这里以 <code>LinkedHashMap</code> 为例，演示一下实际使用效果：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;One&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;Three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token punctuation">.</span><span class="token function">firstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1=One</span>
map<span class="token punctuation">.</span><span class="token function">lastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3=Three</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{1=One, 2=Two, 3=Three}</span>

<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">pollFirstEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//1=One</span>
<span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> last <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">pollLastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3=Three</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{2=Two}</span>

map<span class="token punctuation">.</span><span class="token function">putFirst</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;One&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//{1=One, 2=Two}</span>
map<span class="token punctuation">.</span><span class="token function">putLast</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;Three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//{1=One, 2=Two, 3=Three}</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{1=One, 2=Two, 3=Three}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//{3=Three, 2=Two, 1=One}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jep-439-分代-zgc" tabindex="-1"><a class="header-anchor" href="#jep-439-分代-zgc"><span>JEP 439：分代 ZGC</span></a></h2><p>JDK21 中对 ZGC 进行了功能扩展，增加了分代 GC 功能。不过，默认是关闭的，需要通过配置打开：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>// 启用分代ZGC
<span class="token function">java</span> <span class="token parameter variable">-XX:+UseZGC</span> <span class="token parameter variable">-XX:+ZGenerational</span> <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在未来的版本中，官方会把 ZGenerational 设为默认值，即默认打开 ZGC 的分代 GC。在更晚的版本中，非分代 ZGC 就被移除。</p><blockquote><p>In a future release we intend to make Generational ZGC the default, at which point -XX:-ZGenerational will select non-generational ZGC. In an even later release we intend to remove non-generational ZGC, at which point the ZGenerational option will become obsolete.</p><p>在将来的版本中，我们打算将 Generational ZGC 作为默认选项，此时-XX:-ZGenerational 将选择非分代 ZGC。在更晚的版本中，我们打算移除非分代 ZGC，此时 ZGenerational 选项将变得过时。</p></blockquote><p>分代 ZGC 可以显著减少垃圾回收过程中的停顿时间，并提高应用程序的响应性能。这对于大型 Java 应用程序和高并发场景下的性能优化非常有价值。</p><h2 id="jep-440-记录模式" tabindex="-1"><a class="header-anchor" href="#jep-440-记录模式"><span>JEP 440：记录模式</span></a></h2>`,22),L={href:"https://openjdk.org/jeps/405",target:"_blank",rel:"noopener noreferrer"},C={href:"https://openjdk.org/jeps/432",target:"_blank",rel:"noopener noreferrer"},G=t(`<h2 id="jep-441-switch-的模式匹配" tabindex="-1"><a class="header-anchor" href="#jep-441-switch-的模式匹配"><span>JEP 441：switch 的模式匹配</span></a></h2><p>增强 Java 中的 switch 表达式和语句，允许在 case 标签中使用模式。当模式匹配时，执行 case 标签对应的代码。</p><p>在下面的代码中，switch 表达式使用了类型模式来进行匹配。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">formatterPatternSwitch</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;int %d&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Long</span> l    <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;long %d&quot;</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Double</span> d  <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;double %f&quot;</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">String</span> s  <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;String %s&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span>        <span class="token operator">-&gt;</span> obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jep-442-外部函数和内存-api-第三次预览" tabindex="-1"><a class="header-anchor" href="#jep-442-外部函数和内存-api-第三次预览"><span>JEP 442: 外部函数和内存 API（第三次预览）</span></a></h2><p>Java 程序可以通过该 API 与 Java 运行时之外的代码和数据进行互操作。通过高效地调用外部函数（即 JVM 之外的代码）和安全地访问外部内存（即不受 JVM 管理的内存），该 API 使 Java 程序能够调用本机库并处理本机数据，而不会像 JNI 那样危险和脆弱。</p>`,6),D={href:"https://openjdk.java.net/jeps/412",target:"_blank",rel:"noopener noreferrer"},M={href:"https://openjdk.org/jeps/419",target:"_blank",rel:"noopener noreferrer"},I={href:"https://openjdk.org/jeps/424",target:"_blank",rel:"noopener noreferrer"},V={href:"https://openjdk.org/jeps/434",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://openjdk.org/jeps/442",target:"_blank",rel:"noopener noreferrer"},H=t(`<h2 id="jep-443-未命名模式和变量-预览" tabindex="-1"><a class="header-anchor" href="#jep-443-未命名模式和变量-预览"><span>JEP 443：未命名模式和变量（预览）</span></a></h2><p>未命名模式和变量使得我们可以使用下划线 <code>_</code> 表示未命名的变量以及模式匹配时不使用的组件，旨在提高代码的可读性和可维护性。</p><p>未命名变量的典型场景是 <code>try-with-resources</code> 语句、 <code>catch</code> 子句中的异常变量和<code>for</code>循环。当变量不需要使用的时候就可以使用下划线 <code>_</code>代替，这样清晰标识未被使用的变量。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _ <span class="token operator">=</span> <span class="token class-name">ScopedContext</span><span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// No use of acquired resource</span>
<span class="token punctuation">}</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> _<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> _<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _ <span class="token operator">=</span> <span class="token function">runOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未命名模式是一个无条件的模式，并不绑定任何值。未命名模式变量出现在类型模式中。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token keyword">instanceof</span> <span class="token class-name">ColoredPoint</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token class-name">Color</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> c <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token class-name">RedBall</span> _<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token class-name">BlueBall</span> _<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">processBox</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token class-name">GreenBall</span> _<span class="token punctuation">)</span>                <span class="token operator">-&gt;</span> <span class="token function">stopProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">Box</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span>                          <span class="token operator">-&gt;</span> <span class="token function">pickAnotherBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jep-444-虚拟线程" tabindex="-1"><a class="header-anchor" href="#jep-444-虚拟线程"><span>JEP 444：虚拟线程</span></a></h2><p>虚拟线程是一项重量级的更新，一定一定要重视！</p>`,8),R={href:"https://openjdk.org/jeps/425",target:"_blank",rel:"noopener noreferrer"},F=t(`<h2 id="jep-445-未命名类和实例-main-方法-预览" tabindex="-1"><a class="header-anchor" href="#jep-445-未命名类和实例-main-方法-预览"><span>JEP 445：未命名类和实例 main 方法 （预览）</span></a></h2><p>这个特性主要简化了 <code>main</code> 方法的的声明。对于 Java 初学者来说，这个 <code>main</code> 方法的声明引入了太多的 Java 语法概念，不利于初学者快速上手。</p><p>没有使用该特性之前定义一个 <code>main</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用该新特性之后定义一个 <code>main</code> 方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步精简(未命名的类允许我们不定义类名)：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,9),A={href:"https://howtodoinjava.com/java/java-string-templates/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://howtodoinjava.com/java/sequenced-collections/",target:"_blank",rel:"noopener noreferrer"};function N(O,X){const e=c("ExternalLinkIcon"),p=c("RouteLink");return i(),u("div",null,[k,d,m,n("ul",null,[n("li",null,[n("p",null,[n("a",v,[s("JEP 430：String Templates（字符串模板）"),a(e)]),s("（预览）")])]),n("li",null,[n("p",null,[n("a",g,[s("JEP 431：Sequenced Collections（序列化集合）"),a(e)])])]),n("li",null,[n("p",null,[n("a",b,[s("JEP 439：Generational ZGC（分代 ZGC）"),a(e)])])]),n("li",null,[n("p",null,[n("a",h,[s("JEP 440：Record Patterns（记录模式）"),a(e)])])]),n("li",null,[n("p",null,[n("a",j,[s("JEP 441：Pattern Matching for switch（switch 的模式匹配）"),a(e)])])]),n("li",null,[n("p",null,[n("a",f,[s("JEP 442：Foreign Function & Memory API（外部函数和内存 API）"),a(e)]),s("（第三次预览）")])]),n("li",null,[n("p",null,[n("a",_,[s("JEP 443：Unnamed Patterns and Variables（未命名模式和变量"),a(e)]),s("（预览）")])]),n("li",null,[n("p",null,[n("a",S,[s("JEP 444：Virtual Threads（虚拟线程）"),a(e)])])]),n("li",null,[n("p",null,[n("a",J,[s("JEP 445：Unnamed Classes and Instance Main Methods（未命名类和实例 main 方法 ）"),a(e)]),s("（预览）")])])]),q,n("ul",null,[n("li",null,[n("a",y,[w,a(e)])]),n("li",null,[n("a",E,[P,a(e)])]),n("li",null,[n("a",T,[x,a(e)])])]),K,n("p",null,[s("记录模式在 Java 19 进行了第一次预览， 由 "),n("a",L,[s("JEP 405"),a(e)]),s(" 提出。JDK 20 中是第二次预览，由 "),n("a",C,[s("JEP 432"),a(e)]),s(" 提出。最终，记录模式在 JDK21 顺利转正。")]),n("p",null,[a(p,{to:"/java-core/new-features/java20.html"},{default:o(()=>[s("Java 20 新特性概览")]),_:1}),s("已经详细介绍过记录模式，这里就不重复了。")]),G,n("p",null,[s("外部函数和内存 API 在 Java 17 中进行了第一轮孵化，由 "),n("a",D,[s("JEP 412"),a(e)]),s(" 提出。Java 18 中进行了第二次孵化，由"),n("a",M,[s("JEP 419"),a(e)]),s(" 提出。Java 19 中是第一次预览，由 "),n("a",I,[s("JEP 424"),a(e)]),s(" 提出。JDK 20 中是第二次预览，由 "),n("a",V,[s("JEP 434"),a(e)]),s(" 提出。JDK 21 中是第三次预览，由 "),n("a",Z,[s("JEP 442"),a(e)]),s(" 提出。")]),n("p",null,[s("在 "),a(p,{to:"/java-core/new-features/java19.html"},{default:o(()=>[s("Java 19 新特性概览")]),_:1}),s(" 中，我有详细介绍到外部函数和内存 API，这里就不再做额外的介绍了。")]),H,n("p",null,[s("虚拟线程在 Java 19 中进行了第一次预览，由"),n("a",R,[s("JEP 425"),a(e)]),s("提出。JDK 20 中是第二次预览。最终，虚拟线程在 JDK21 顺利转正。")]),n("p",null,[a(p,{to:"/java-core/new-features/java20.html"},{default:o(()=>[s("Java 20 新特性概览")]),_:1}),s("已经详细介绍过虚拟线程，这里就不重复了。")]),F,n("ul",null,[n("li",null,[s("Java 21 String Templates："),n("a",A,[s("https://howtodoinjava.com/java/java-string-templates/"),a(e)])]),n("li",null,[s("Java 21 Sequenced Collections："),n("a",B,[s("https://howtodoinjava.com/java/sequenced-collections/"),a(e)])])])])}const U=l(r,[["render",N],["__file","java21.html.vue"]]),$=JSON.parse('{"path":"/java-core/new-features/java21.html","title":"Java 21 新特性概览(重要)","lang":"zh-CN","frontmatter":{"title":"Java 21 新特性概览(重要)","category":"Java","tag":["Java新特性"],"description":"JDK 21 于 2023 年 9 月 19 日 发布，这是一个非常重要的版本，里程碑式。 JDK21 是 LTS（长期支持版），至此为止，目前有 JDK8、JDK11、JDK17 和 JDK21 这四个长期支持版了。 JDK 21 共有 15 个新特性，这篇文章会挑选其中较为重要的一些新特性进行详细介绍： JEP 430：String Templat...","head":[["meta",{"property":"og:url","content":"https://snailcoding.cn/java-core/new-features/java21.html"}],["meta",{"property":"og:site_name","content":"蜗牛のJava宝典"}],["meta",{"property":"og:title","content":"Java 21 新特性概览(重要)"}],["meta",{"property":"og:description","content":"JDK 21 于 2023 年 9 月 19 日 发布，这是一个非常重要的版本，里程碑式。 JDK21 是 LTS（长期支持版），至此为止，目前有 JDK8、JDK11、JDK17 和 JDK21 这四个长期支持版了。 JDK 21 共有 15 个新特性，这篇文章会挑选其中较为重要的一些新特性进行详细介绍： JEP 430：String Templat..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Xu"}],["meta",{"property":"article:tag","content":"Java新特性"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 21 新特性概览(重要)\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Xu\\",\\"url\\":\\"https://snailcoding.cn\\"}]}"]]},"headers":[{"level":2,"title":"JEP 430：字符串模板（预览）","slug":"jep-430-字符串模板-预览","link":"#jep-430-字符串模板-预览","children":[]},{"level":2,"title":"JEP431：序列化集合","slug":"jep431-序列化集合","link":"#jep431-序列化集合","children":[]},{"level":2,"title":"JEP 439：分代 ZGC","slug":"jep-439-分代-zgc","link":"#jep-439-分代-zgc","children":[]},{"level":2,"title":"JEP 440：记录模式","slug":"jep-440-记录模式","link":"#jep-440-记录模式","children":[]},{"level":2,"title":"JEP 441：switch 的模式匹配","slug":"jep-441-switch-的模式匹配","link":"#jep-441-switch-的模式匹配","children":[]},{"level":2,"title":"JEP 442: 外部函数和内存 API（第三次预览）","slug":"jep-442-外部函数和内存-api-第三次预览","link":"#jep-442-外部函数和内存-api-第三次预览","children":[]},{"level":2,"title":"JEP 443：未命名模式和变量（预览）","slug":"jep-443-未命名模式和变量-预览","link":"#jep-443-未命名模式和变量-预览","children":[]},{"level":2,"title":"JEP 444：虚拟线程","slug":"jep-444-虚拟线程","link":"#jep-444-虚拟线程","children":[]},{"level":2,"title":"JEP 445：未命名类和实例 main 方法 （预览）","slug":"jep-445-未命名类和实例-main-方法-预览","link":"#jep-445-未命名类和实例-main-方法-预览","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":9.02,"words":2707},"filePathRelative":"java-core/new-features/java21.md","excerpt":"<p>JDK 21 于 2023 年 9 月 19 日 发布，这是一个非常重要的版本，里程碑式。</p>\\n<p>JDK21 是 LTS（长期支持版），至此为止，目前有 JDK8、JDK11、JDK17 和 JDK21 这四个长期支持版了。</p>\\n<p>JDK 21 共有 15 个新特性，这篇文章会挑选其中较为重要的一些新特性进行详细介绍：</p>\\n<ul>\\n<li>\\n<p><a href=\\"https://openjdk.org/jeps/430\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 430：String Templates（字符串模板）</a>（预览）</p>\\n</li>\\n<li>\\n<p><a href=\\"https://openjdk.org/jeps/431\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 431：Sequenced Collections（序列化集合）</a></p>\\n</li>\\n<li>\\n<p><a href=\\"https://openjdk.org/jeps/439\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 439：Generational ZGC（分代 ZGC）</a></p>\\n</li>\\n<li>\\n<p><a href=\\"https://openjdk.org/jeps/440\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 440：Record Patterns（记录模式）</a></p>\\n</li>\\n<li>\\n<p><a href=\\"https://openjdk.org/jeps/442\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 441：Pattern Matching for switch（switch 的模式匹配）</a></p>\\n</li>\\n<li>\\n<p><a href=\\"https://openjdk.org/jeps/442\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 442：Foreign Function &amp; Memory API（外部函数和内存 API）</a>（第三次预览）</p>\\n</li>\\n<li>\\n<p><a href=\\"https://openjdk.org/jeps/443\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 443：Unnamed Patterns and Variables（未命名模式和变量</a>（预览）</p>\\n</li>\\n<li>\\n<p><a href=\\"https://openjdk.org/jeps/444\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 444：Virtual Threads（虚拟线程）</a></p>\\n</li>\\n<li>\\n<p><a href=\\"https://openjdk.org/jeps/445\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JEP 445：Unnamed Classes and Instance Main Methods（未命名类和实例 main 方法 ）</a>（预览）</p>\\n</li>\\n</ul>","autoDesc":true}');export{U as comp,$ as data};
