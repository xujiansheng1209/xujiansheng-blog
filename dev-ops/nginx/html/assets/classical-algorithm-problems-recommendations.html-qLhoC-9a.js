import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as a,c,a as e,d as t,b as n,e as r}from"./app-Cg1ooxyK.js";const i={},p=r('<h2 id="贪心算法" tabindex="-1"><a class="header-anchor" href="#贪心算法"><span>贪心算法</span></a></h2><h3 id="算法思想" tabindex="-1"><a class="header-anchor" href="#算法思想"><span>算法思想</span></a></h3><p>贪心的本质是选择每一阶段的局部最优，从而达到全局最优。</p><h3 id="一般解题步骤" tabindex="-1"><a class="header-anchor" href="#一般解题步骤"><span>一般解题步骤</span></a></h3><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><h3 id="leetcode" tabindex="-1"><a class="header-anchor" href="#leetcode"><span>LeetCode</span></a></h3>',6),h={href:"https://leetcode.cn/problems/assign-cookies/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://leetcode.cn/problems/jump-game/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://leetcode.cn/problems/jump-game-ii/",target:"_blank",rel:"noopener noreferrer"},_=r('<h2 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划"><span>动态规划</span></a></h2><h3 id="算法思想-1" tabindex="-1"><a class="header-anchor" href="#算法思想-1"><span>算法思想</span></a></h3><p>动态规划中每一个状态一定是由上一个状态推导出来的，这一点就区分于贪心，贪心没有状态推导，而是从局部直接选最优的。</p><p>经典题目：01 背包、完全背包</p><h3 id="一般解题步骤-1" tabindex="-1"><a class="header-anchor" href="#一般解题步骤-1"><span>一般解题步骤</span></a></h3><ul><li>确定 dp 数组（dp table）以及下标的含义</li><li>确定递推公式</li><li>dp 数组如何初始化</li><li>确定遍历顺序</li><li>举例推导 dp 数组</li></ul><h3 id="leetcode-1" tabindex="-1"><a class="header-anchor" href="#leetcode-1"><span>LeetCode</span></a></h3>',7),g={href:"https://leetcode.cn/problems/fibonacci-number/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://leetcode.cn/problems/min-cost-climbing-stairs/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://leetcode.cn/problems/partition-equal-subset-sum/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://leetcode.cn/problems/coin-change-ii/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://leetcode.cn/problems/palindromic-substrings/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://leetcode.cn/problems/longest-palindromic-subsequence/",target:"_blank",rel:"noopener noreferrer"},C=r('<h2 id="回溯算法" tabindex="-1"><a class="header-anchor" href="#回溯算法"><span>回溯算法</span></a></h2><h3 id="算法思想-2" tabindex="-1"><a class="header-anchor" href="#算法思想-2"><span>算法思想</span></a></h3><p>回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条</p><p>件时，就“回溯”返回，尝试别的路径。其本质就是穷举。</p><p>经典题目：8 皇后</p><h3 id="一般解题步骤-2" tabindex="-1"><a class="header-anchor" href="#一般解题步骤-2"><span>一般解题步骤</span></a></h3><ul><li>针对所给问题，定义问题的解空间，它至少包含问题的一个（最优）解。</li><li>确定易于搜索的解空间结构,使得能用回溯法方便地搜索整个解空间 。</li><li>以深度优先的方式搜索解空间，并且在搜索过程中用剪枝函数避免无效搜索。</li></ul><h3 id="leetcode-2" tabindex="-1"><a class="header-anchor" href="#leetcode-2"><span>leetcode</span></a></h3>',8),L={href:"https://leetcode.cn/problems/combinations/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://leetcode.cn/problems/combination-sum/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://leetcode.cn/problems/combination-sum-ii/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://leetcode.cn/problems/subsets/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://leetcode.cn/problems/subsets-ii/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://leetcode.cn/problems/n-queens/",target:"_blank",rel:"noopener noreferrer"},V=r('<h2 id="分治算法" tabindex="-1"><a class="header-anchor" href="#分治算法"><span>分治算法</span></a></h2><h3 id="算法思想-3" tabindex="-1"><a class="header-anchor" href="#算法思想-3"><span>算法思想</span></a></h3><p>将一个规模为 N 的问题分解为 K 个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解。</p><p>经典题目：二分查找、汉诺塔问题</p><h3 id="一般解题步骤-3" tabindex="-1"><a class="header-anchor" href="#一般解题步骤-3"><span>一般解题步骤</span></a></h3><ul><li>将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题；</li><li>若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</li><li>将各个子问题的解合并为原问题的解。</li></ul><h3 id="leetcode-3" tabindex="-1"><a class="header-anchor" href="#leetcode-3"><span>LeetCode</span></a></h3>',7),B={href:"https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://leetcode.cn/problems/sort-list/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://leetcode.cn/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"};function P(z,A){const l=s("ExternalLinkIcon");return a(),c("div",null,[p,e("p",null,[t("455.分发饼干："),e("a",h,[t("https://leetcode.cn/problems/assign-cookies/"),n(l)])]),e("p",null,[t("121.买卖股票的最佳时机："),e("a",d,[t("https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/"),n(l)])]),e("p",null,[t("122.买卖股票的最佳时机 II："),e("a",m,[t("https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/"),n(l)])]),e("p",null,[t("55.跳跃游戏："),e("a",b,[t("https://leetcode.cn/problems/jump-game/"),n(l)])]),e("p",null,[t("45.跳跃游戏 II："),e("a",u,[t("https://leetcode.cn/problems/jump-game-ii/"),n(l)])]),_,e("p",null,[t("509.斐波那契数："),e("a",g,[t("https://leetcode.cn/problems/fibonacci-number/"),n(l)])]),e("p",null,[t("746.使用最小花费爬楼梯："),e("a",f,[t("https://leetcode.cn/problems/min-cost-climbing-stairs/"),n(l)])]),e("p",null,[t("416.分割等和子集："),e("a",k,[t("https://leetcode.cn/problems/partition-equal-subset-sum/"),n(l)])]),e("p",null,[t("518.零钱兑换："),e("a",x,[t("https://leetcode.cn/problems/coin-change-ii/"),n(l)])]),e("p",null,[t("647.回文子串："),e("a",v,[t("https://leetcode.cn/problems/palindromic-substrings/"),n(l)])]),e("p",null,[t("516.最长回文子序列："),e("a",y,[t("https://leetcode.cn/problems/longest-palindromic-subsequence/"),n(l)])]),C,e("p",null,[t("77.组合："),e("a",L,[t("https://leetcode.cn/problems/combinations/"),n(l)])]),e("p",null,[t("39.组合总和："),e("a",I,[t("https://leetcode.cn/problems/combination-sum/"),n(l)])]),e("p",null,[t("40.组合总和 II："),e("a",N,[t("https://leetcode.cn/problems/combination-sum-ii/"),n(l)])]),e("p",null,[t("78.子集："),e("a",q,[t("https://leetcode.cn/problems/subsets/"),n(l)])]),e("p",null,[t("90.子集 II："),e("a",j,[t("https://leetcode.cn/problems/subsets-ii/"),n(l)])]),e("p",null,[t("51.N 皇后："),e("a",T,[t("https://leetcode.cn/problems/n-queens/"),n(l)])]),V,e("p",null,[t("108.将有序数组转换成二叉搜索数："),e("a",B,[t("https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/"),n(l)])]),e("p",null,[t("148.排序列表："),e("a",E,[t("https://leetcode.cn/problems/sort-list/"),n(l)])]),e("p",null,[t("23.合并 k 个升序链表："),e("a",M,[t("https://leetcode.cn/problems/merge-k-sorted-lists/"),n(l)])])])}const S=o(i,[["render",P],["__file","classical-algorithm-problems-recommendations.html.vue"]]),X=JSON.parse('{"path":"/cs-basics/data-structure/classical-algorithm-problems-recommendations.html","title":"经典算法思想总结（含LeetCode题目推荐）","lang":"zh-CN","frontmatter":{"title":"经典算法思想总结（含LeetCode题目推荐）","category":"计算机基础","tag":["算法"],"description":"贪心算法 算法思想 贪心的本质是选择每一阶段的局部最优，从而达到全局最优。 一般解题步骤 将问题分解为若干个子问题 找出适合的贪心策略 求解每一个子问题的最优解 将局部最优解堆叠成全局最优解 LeetCode 455.分发饼干：https://leetcode.cn/problems/assign-cookies/ 121.买卖股票的最佳时机：http...","head":[["meta",{"property":"og:url","content":"https://snailcoding.cn/cs-basics/data-structure/classical-algorithm-problems-recommendations.html"}],["meta",{"property":"og:site_name","content":"蜗牛のJava宝典"}],["meta",{"property":"og:title","content":"经典算法思想总结（含LeetCode题目推荐）"}],["meta",{"property":"og:description","content":"贪心算法 算法思想 贪心的本质是选择每一阶段的局部最优，从而达到全局最优。 一般解题步骤 将问题分解为若干个子问题 找出适合的贪心策略 求解每一个子问题的最优解 将局部最优解堆叠成全局最优解 LeetCode 455.分发饼干：https://leetcode.cn/problems/assign-cookies/ 121.买卖股票的最佳时机：http..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Mr.Xu"}],["meta",{"property":"article:tag","content":"算法"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"经典算法思想总结（含LeetCode题目推荐）\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Xu\\",\\"url\\":\\"https://snailcoding.cn\\"}]}"]]},"headers":[{"level":2,"title":"贪心算法","slug":"贪心算法","link":"#贪心算法","children":[{"level":3,"title":"算法思想","slug":"算法思想","link":"#算法思想","children":[]},{"level":3,"title":"一般解题步骤","slug":"一般解题步骤","link":"#一般解题步骤","children":[]},{"level":3,"title":"LeetCode","slug":"leetcode","link":"#leetcode","children":[]}]},{"level":2,"title":"动态规划","slug":"动态规划","link":"#动态规划","children":[{"level":3,"title":"算法思想","slug":"算法思想-1","link":"#算法思想-1","children":[]},{"level":3,"title":"一般解题步骤","slug":"一般解题步骤-1","link":"#一般解题步骤-1","children":[]},{"level":3,"title":"LeetCode","slug":"leetcode-1","link":"#leetcode-1","children":[]}]},{"level":2,"title":"回溯算法","slug":"回溯算法","link":"#回溯算法","children":[{"level":3,"title":"算法思想","slug":"算法思想-2","link":"#算法思想-2","children":[]},{"level":3,"title":"一般解题步骤","slug":"一般解题步骤-2","link":"#一般解题步骤-2","children":[]},{"level":3,"title":"leetcode","slug":"leetcode-2","link":"#leetcode-2","children":[]}]},{"level":2,"title":"分治算法","slug":"分治算法","link":"#分治算法","children":[{"level":3,"title":"算法思想","slug":"算法思想-3","link":"#算法思想-3","children":[]},{"level":3,"title":"一般解题步骤","slug":"一般解题步骤-3","link":"#一般解题步骤-3","children":[]},{"level":3,"title":"LeetCode","slug":"leetcode-3","link":"#leetcode-3","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.6,"words":781},"filePathRelative":"cs-basics/data-structure/classical-algorithm-problems-recommendations.md","excerpt":"<h2>贪心算法</h2>\\n<h3>算法思想</h3>\\n<p>贪心的本质是选择每一阶段的局部最优，从而达到全局最优。</p>\\n<h3>一般解题步骤</h3>\\n<ul>\\n<li>将问题分解为若干个子问题</li>\\n<li>找出适合的贪心策略</li>\\n<li>求解每一个子问题的最优解</li>\\n<li>将局部最优解堆叠成全局最优解</li>\\n</ul>\\n<h3>LeetCode</h3>\\n<p>455.分发饼干：<a href=\\"https://leetcode.cn/problems/assign-cookies/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://leetcode.cn/problems/assign-cookies/</a></p>","autoDesc":true}');export{S as comp,X as data};
