import comp from "/Users/ruby/idea_demo/xujiansheng-blog/docs/.vuepress/.temp/pages/java-core/concurrent/java-concurrent-questions-03.html.vue"
const data = JSON.parse("{\"path\":\"/java-core/concurrent/java-concurrent-questions-03.html\",\"title\":\"Java并发常见面试题总结（下）\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Java并发常见面试题总结（下）\",\"category\":\"Java\",\"tag\":[\"Java并发\"],\"head\":[[\"meta\",{\"name\":\"keywords\",\"content\":\"多线程,死锁,线程池,CAS,AQS\"}],[\"meta\",{\"name\":\"description\",\"content\":\"Java并发常见知识点和面试题总结（含详细解答），希望对你有帮助！\"}],[\"meta\",{\"property\":\"og:url\",\"content\":\"https://snailcoding.cn/java-core/concurrent/java-concurrent-questions-03.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"蜗牛のJava宝典\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Java并发常见面试题总结（下）\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"ThreadLocal ThreadLocal 有什么用？ 通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？ JDK 中自带的ThreadLocal类正是为了解决这样的问题。 ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://oss.javaguide.cn/github/javaguide/java/concurrent/threadlocal-data-structure.png\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"Java并发常见面试题总结（下）\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Mr.Xu\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Java并发\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Java并发常见面试题总结（下）\\\",\\\"image\\\":[\\\"https://oss.javaguide.cn/github/javaguide/java/concurrent/threadlocal-data-structure.png\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/concurrent/thread-local-inner-class.png\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/concurrent/executors-inner-threadpool.png\\\",\\\"https://oss.javaguide.cn/javaguide/%E5%9B%BE%E8%A7%A3%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.png\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/concurrent/threadpoolexecutor-methods.png\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/concurrent/meituan-dynamically-configuring-thread-pool-parameters.png\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/concurrent/common-parameters-of-threadpool-workqueue.jpg\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/concurrent/completablefuture-class-diagram.jpg\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/concurrent/completablefuture-class-diagram.jpg\\\",\\\"https://oss.javaguide.cn/javaguide/image-20210902093026059.png\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/AQS.png\\\",\\\"https://oss.javaguide.cn/p3-juejin/40cb932a64694262993907ebda6a0bfe~tplv-k3u1fbpfcp-zoom-1.png\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/CLH.png\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Mr.Xu\\\",\\\"url\\\":\\\"https://snailcoding.cn\\\"}]}\"]],\"description\":\"ThreadLocal ThreadLocal 有什么用？ 通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？ JDK 中自带的ThreadLocal类正是为了解决这样的问题。 ThreadLocal类主要解决的就是让每个线程绑定自己的值，可以将ThreadLocal类形象的比喻成存放数...\"},\"headers\":[{\"level\":2,\"title\":\"ThreadLocal\",\"slug\":\"threadlocal\",\"link\":\"#threadlocal\",\"children\":[{\"level\":3,\"title\":\"ThreadLocal 有什么用？\",\"slug\":\"threadlocal-有什么用\",\"link\":\"#threadlocal-有什么用\",\"children\":[]},{\"level\":3,\"title\":\"如何使用 ThreadLocal？\",\"slug\":\"如何使用-threadlocal\",\"link\":\"#如何使用-threadlocal\",\"children\":[]},{\"level\":3,\"title\":\"ThreadLocal 原理了解吗？\",\"slug\":\"threadlocal-原理了解吗\",\"link\":\"#threadlocal-原理了解吗\",\"children\":[]},{\"level\":3,\"title\":\"ThreadLocal 内存泄露问题是怎么导致的？\",\"slug\":\"threadlocal-内存泄露问题是怎么导致的\",\"link\":\"#threadlocal-内存泄露问题是怎么导致的\",\"children\":[]}]},{\"level\":2,\"title\":\"线程池\",\"slug\":\"线程池\",\"link\":\"#线程池\",\"children\":[{\"level\":3,\"title\":\"什么是线程池?\",\"slug\":\"什么是线程池\",\"link\":\"#什么是线程池\",\"children\":[]},{\"level\":3,\"title\":\"为什么要用线程池？\",\"slug\":\"为什么要用线程池\",\"link\":\"#为什么要用线程池\",\"children\":[]},{\"level\":3,\"title\":\"如何创建线程池？\",\"slug\":\"如何创建线程池\",\"link\":\"#如何创建线程池\",\"children\":[]},{\"level\":3,\"title\":\"为什么不推荐使用内置线程池？\",\"slug\":\"为什么不推荐使用内置线程池\",\"link\":\"#为什么不推荐使用内置线程池\",\"children\":[]},{\"level\":3,\"title\":\"线程池常见参数有哪些？如何解释？\",\"slug\":\"线程池常见参数有哪些-如何解释\",\"link\":\"#线程池常见参数有哪些-如何解释\",\"children\":[]},{\"level\":3,\"title\":\"线程池的饱和策略有哪些？\",\"slug\":\"线程池的饱和策略有哪些\",\"link\":\"#线程池的饱和策略有哪些\",\"children\":[]},{\"level\":3,\"title\":\"线程池常用的阻塞队列有哪些？\",\"slug\":\"线程池常用的阻塞队列有哪些\",\"link\":\"#线程池常用的阻塞队列有哪些\",\"children\":[]},{\"level\":3,\"title\":\"线程池处理任务的流程了解吗？\",\"slug\":\"线程池处理任务的流程了解吗\",\"link\":\"#线程池处理任务的流程了解吗\",\"children\":[]},{\"level\":3,\"title\":\"如何给线程池命名？\",\"slug\":\"如何给线程池命名\",\"link\":\"#如何给线程池命名\",\"children\":[]},{\"level\":3,\"title\":\"如何设定线程池的大小？\",\"slug\":\"如何设定线程池的大小\",\"link\":\"#如何设定线程池的大小\",\"children\":[]},{\"level\":3,\"title\":\"如何动态修改线程池的参数？\",\"slug\":\"如何动态修改线程池的参数\",\"link\":\"#如何动态修改线程池的参数\",\"children\":[]},{\"level\":3,\"title\":\"如何设计一个能够根据任务的优先级来执行的线程池？\",\"slug\":\"如何设计一个能够根据任务的优先级来执行的线程池\",\"link\":\"#如何设计一个能够根据任务的优先级来执行的线程池\",\"children\":[]}]},{\"level\":2,\"title\":\"Future\",\"slug\":\"future\",\"link\":\"#future\",\"children\":[{\"level\":3,\"title\":\"Future 类有什么用？\",\"slug\":\"future-类有什么用\",\"link\":\"#future-类有什么用\",\"children\":[]},{\"level\":3,\"title\":\"Callable 和 Future 有什么关系？\",\"slug\":\"callable-和-future-有什么关系\",\"link\":\"#callable-和-future-有什么关系\",\"children\":[]},{\"level\":3,\"title\":\"CompletableFuture 类有什么用？\",\"slug\":\"completablefuture-类有什么用\",\"link\":\"#completablefuture-类有什么用\",\"children\":[]}]},{\"level\":2,\"title\":\"AQS\",\"slug\":\"aqs\",\"link\":\"#aqs\",\"children\":[{\"level\":3,\"title\":\"AQS 是什么？\",\"slug\":\"aqs-是什么\",\"link\":\"#aqs-是什么\",\"children\":[]},{\"level\":3,\"title\":\"AQS 的原理是什么？\",\"slug\":\"aqs-的原理是什么\",\"link\":\"#aqs-的原理是什么\",\"children\":[]},{\"level\":3,\"title\":\"Semaphore 有什么用？\",\"slug\":\"semaphore-有什么用\",\"link\":\"#semaphore-有什么用\",\"children\":[]},{\"level\":3,\"title\":\"Semaphore 的原理是什么？\",\"slug\":\"semaphore-的原理是什么\",\"link\":\"#semaphore-的原理是什么\",\"children\":[]},{\"level\":3,\"title\":\"CountDownLatch 有什么用？\",\"slug\":\"countdownlatch-有什么用\",\"link\":\"#countdownlatch-有什么用\",\"children\":[]},{\"level\":3,\"title\":\"CountDownLatch 的原理是什么？\",\"slug\":\"countdownlatch-的原理是什么\",\"link\":\"#countdownlatch-的原理是什么\",\"children\":[]},{\"level\":3,\"title\":\"用过 CountDownLatch 么？什么场景下用的？\",\"slug\":\"用过-countdownlatch-么-什么场景下用的\",\"link\":\"#用过-countdownlatch-么-什么场景下用的\",\"children\":[]},{\"level\":3,\"title\":\"CyclicBarrier 有什么用？\",\"slug\":\"cyclicbarrier-有什么用\",\"link\":\"#cyclicbarrier-有什么用\",\"children\":[]},{\"level\":3,\"title\":\"CyclicBarrier 的原理是什么？\",\"slug\":\"cyclicbarrier-的原理是什么\",\"link\":\"#cyclicbarrier-的原理是什么\",\"children\":[]}]},{\"level\":2,\"title\":\"虚拟线程\",\"slug\":\"虚拟线程\",\"link\":\"#虚拟线程\",\"children\":[]},{\"level\":2,\"title\":\"参考\",\"slug\":\"参考\",\"link\":\"#参考\",\"children\":[]}],\"git\":{\"createdTime\":null,\"updatedTime\":null,\"contributors\":[]},\"readingTime\":{\"minutes\":40.54,\"words\":12161},\"filePathRelative\":\"java-core/concurrent/java-concurrent-questions-03.md\",\"excerpt\":\"<h2>ThreadLocal</h2>\\n<h3>ThreadLocal 有什么用？</h3>\\n<p>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。<strong>如果想实现每一个线程都有自己的专属本地变量该如何解决呢？</strong></p>\\n<p>JDK 中自带的<code>ThreadLocal</code>类正是为了解决这样的问题。 <strong><code>ThreadLocal</code>类主要解决的就是让每个线程绑定自己的值，可以将<code>ThreadLocal</code>类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。</strong></p>\",\"autoDesc\":true}")
export { comp, data }
