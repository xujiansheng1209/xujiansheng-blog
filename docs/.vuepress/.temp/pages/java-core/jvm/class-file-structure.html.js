import comp from "/Users/ruby/idea_demo/xujiansheng-blog/docs/.vuepress/.temp/pages/java-core/jvm/class-file-structure.html.vue"
const data = JSON.parse("{\"path\":\"/java-core/jvm/class-file-structure.html\",\"title\":\"类文件结构详解\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"类文件结构详解\",\"category\":\"Java\",\"tag\":[\"JVM\"],\"description\":\"回顾一下字节码 在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://snailcoding.cn/java-core/jvm/class-file-structure.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"蜗牛のJava宝典\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"类文件结构详解\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"回顾一下字节码 在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://oss.javaguide.cn/github/javaguide/java/basis/java-virtual-machine-program-language-os.png\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"类文件结构详解\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Mr.Xu\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"JVM\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"类文件结构详解\\\",\\\"image\\\":[\\\"https://oss.javaguide.cn/github/javaguide/java/basis/java-virtual-machine-program-language-os.png\\\",\\\"https://oss.javaguide.cn/java-guide-blog/16d5ec47609818fc.jpeg\\\",\\\"https://oss.javaguide.cn/java-guide-blog/image-20210401170711475.png\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/%E8%AE%BF%E9%97%AE%E6%A0%87%E5%BF%97.png\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/%E6%9F%A5%E7%9C%8B%E7%B1%BB%E7%9A%84%E8%AE%BF%E9%97%AE%E6%A0%87%E5%BF%97.png\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/%E5%AD%97%E6%AE%B5%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84.png\\\",\\\"https://oss.javaguide.cn/JVM/image-20201031084342859.png\\\",\\\"https://oss.javaguide.cn/github/javaguide/java/%E6%96%B9%E6%B3%95%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84.png\\\",\\\"https://oss.javaguide.cn/JVM/image-20201031084248965.png\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Mr.Xu\\\",\\\"url\\\":\\\"https://snailcoding.cn\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"回顾一下字节码\",\"slug\":\"回顾一下字节码\",\"link\":\"#回顾一下字节码\",\"children\":[]},{\"level\":2,\"title\":\"Class 文件结构总结\",\"slug\":\"class-文件结构总结\",\"link\":\"#class-文件结构总结\",\"children\":[{\"level\":3,\"title\":\"魔数（Magic Number）\",\"slug\":\"魔数-magic-number\",\"link\":\"#魔数-magic-number\",\"children\":[]},{\"level\":3,\"title\":\"Class 文件版本号（Minor&Major Version）\",\"slug\":\"class-文件版本号-minor-major-version\",\"link\":\"#class-文件版本号-minor-major-version\",\"children\":[]},{\"level\":3,\"title\":\"常量池（Constant Pool）\",\"slug\":\"常量池-constant-pool\",\"link\":\"#常量池-constant-pool\",\"children\":[]},{\"level\":3,\"title\":\"访问标志(Access Flags)\",\"slug\":\"访问标志-access-flags\",\"link\":\"#访问标志-access-flags\",\"children\":[]},{\"level\":3,\"title\":\"当前类（This Class）、父类（Super Class）、接口（Interfaces）索引集合\",\"slug\":\"当前类-this-class-、父类-super-class-、接口-interfaces-索引集合\",\"link\":\"#当前类-this-class-、父类-super-class-、接口-interfaces-索引集合\",\"children\":[]},{\"level\":3,\"title\":\"字段表集合（Fields）\",\"slug\":\"字段表集合-fields\",\"link\":\"#字段表集合-fields\",\"children\":[]},{\"level\":3,\"title\":\"方法表集合（Methods）\",\"slug\":\"方法表集合-methods\",\"link\":\"#方法表集合-methods\",\"children\":[]},{\"level\":3,\"title\":\"属性表集合（Attributes）\",\"slug\":\"属性表集合-attributes\",\"link\":\"#属性表集合-attributes\",\"children\":[]}]},{\"level\":2,\"title\":\"参考\",\"slug\":\"参考\",\"link\":\"#参考\",\"children\":[]}],\"git\":{\"createdTime\":null,\"updatedTime\":null,\"contributors\":[]},\"readingTime\":{\"minutes\":8.85,\"words\":2655},\"filePathRelative\":\"java-core/jvm/class-file-structure.md\",\"excerpt\":\"<h2>回顾一下字节码</h2>\\n<p>在 Java 中，JVM 可以理解的代码就叫做<code>字节码</code>（即扩展名为 <code>.class</code> 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。</p>\\n<p>Clojure（Lisp 语言的一种方言）、Groovy、Scala、JRuby、Kotlin 等语言都是运行在 Java 虚拟机之上。下图展示了不同的语言被不同的编译器编译成<code>.class</code>文件最终运行在 Java 虚拟机之上。<code>.class</code>文件的二进制格式可以使用 <a href=\\\"https://www.x-ways.net/winhex/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">WinHex</a> 查看。</p>\",\"autoDesc\":true}")
export { comp, data }
